package xxqp.oracle.apps.ar.pdft.altafitec.masiplat.server;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import java.io.InputStream;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;

import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.util.ByteArrayDataSource;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.webui.OAPageContext;
import oracle.apps.fnd.framework.webui.beans.OAWebBean;
import oracle.apps.fnd.framework.webui.beans.form.OAFormValueBean;
import oracle.apps.fnd.framework.webui.beans.message.OAMessageChoiceBean;
import oracle.apps.fnd.framework.webui.beans.message.OAMessageTextInputBean;

import oracle.apps.xdo.delivery.DeliveryException;
import oracle.apps.xdo.delivery.DeliveryManager;
import oracle.apps.xdo.delivery.DeliveryPropertyDefinitions;
import oracle.apps.xdo.delivery.DeliveryRequest;
import oracle.apps.xdo.delivery.InvalidFactoryException;
import oracle.apps.xdo.delivery.UndefinedRequestTypeException;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.BlobDomain;

import oracle.jdbc.OracleCallableStatement;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MasivoYPlatinumAMImpl extends OAApplicationModuleImpl {
    
    public static String strXxqpPdftEmail;
    public static String strXxqpPdftEmailPwd;
    
    /**This is the default constructor (do not remove)
     */
    public MasivoYPlatinumAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("xxqp.oracle.apps.ar.pdft.altafitec.masiplat.server", /* package name */
      "MasivoYPlatinumAMLocal" /* Configuration Name */);
    }
    
    /**Container's getter for XxqpPdftMypHeaderVO1
     */
    public XxqpPdftMypHeaderVOImpl getXxqpPdftMypHeaderVO1() {
        return (XxqpPdftMypHeaderVOImpl)findViewObject("XxqpPdftMypHeaderVO1");
    }
   
    /**Container's getter for XxqpPdftMypGeneralVO1
     */
    public XxqpPdftMypGeneralVOImpl getXxqpPdftMypGeneralVO1() {
        return (XxqpPdftMypGeneralVOImpl)findViewObject("XxqpPdftMypGeneralVO1");
    }

    /**Container's getter for XxqpPdftMypCoberturaVO1
     */
    public XxqpPdftMypCoberturaVOImpl getXxqpPdftMypCoberturaVO1() {
        return (XxqpPdftMypCoberturaVOImpl)findViewObject("XxqpPdftMypCoberturaVO1");
    }

    /**Container's getter for XxqpPdftMypDistribucionVO1
     */
    public XxqpPdftMypDistribucionVOImpl getXxqpPdftMypDistribucionVO1() {
        return (XxqpPdftMypDistribucionVOImpl)findViewObject("XxqpPdftMypDistribucionVO1");
    }
    
    /**Container's getter for ProcesosTmpVO1
     */
    public ProcesosTmpVOImpl getProcesosTmpVO1() {
        return (ProcesosTmpVOImpl)findViewObject("ProcesosTmpVO1");
    }
    
    /**Container's getter for OtrosProcesosTmpVO1
     */
    public OtrosProcesosTmpVOImpl getOtrosProcesosTmpVO1() {
        return (OtrosProcesosTmpVOImpl)findViewObject("OtrosProcesosTmpVO1");
    }

    /**Container's getter for XxqpPdftMypProcesosVO1
     */
    public XxqpPdftMypProcesosVOImpl getXxqpPdftMypProcesosVO1() {
        return (XxqpPdftMypProcesosVOImpl)findViewObject("XxqpPdftMypProcesosVO1");
    }

    /**Container's getter for XxqpPdftMypOtrosProcesosVO1
     */
    public XxqpPdftMypOtrosProcesosVOImpl getXxqpPdftMypOtrosProcesosVO1() {
        return (XxqpPdftMypOtrosProcesosVOImpl)findViewObject("XxqpPdftMypOtrosProcesosVO1");
    }
    
    /**Container's getter for XxqpPdftMypComentsProcesosVO1
     */
    public XxqpPdftMypComentsProcesosVOImpl getXxqpPdftMypComentsProcesosVO1() {
        return (XxqpPdftMypComentsProcesosVOImpl)findViewObject("XxqpPdftMypComentsProcesosVO1");
    }

    /**Container's getter for MypHeaderTmpVO1
     */
    public MypHeaderTmpVOImpl getMypHeaderTmpVO1() {
        return (MypHeaderTmpVOImpl)findViewObject("MypHeaderTmpVO1");
    }

    public void fillCamposHead(OAPageContext pageContext, OAWebBean webBean) {
    
        OAMessageTextInputBean FechaActualBean = (OAMessageTextInputBean)webBean.findChildRecursive("Fecha");                 
        /** OAMessageTextInputBean EjecutivoBean = (OAMessageTextInputBean)webBean.findChildRecursive("Ejecutivo"); NA 13072018 **/  
        OAMessageTextInputBean NombreDelClienteBean = (OAMessageTextInputBean)webBean.findChildRecursive("NombreDelCliente");  
        OAMessageChoiceBean EstatusBean = (OAMessageChoiceBean)webBean.findChildRecursive("Estatus"); 
        OAFormValueBean PartyIdBean = (OAFormValueBean)webBean.findChildRecursive("PartyId"); 
        if(null!=EstatusBean){
            EstatusBean.setValue(pageContext,"PRELIMINAR");
        }
        
        OADBTransaction  oADBTransaction = this.getOADBTransaction();

        Connection connection =   oADBTransaction.getJdbcConnection();
          String strPrepStmt = " select   p.party_id " +
                               "         ,to_char(sysdate,'DD-MON-YYYY HH24:MI:SS') fecha_actual\n" + 
                               "         ,(select  fu.user_name||' - '||fu.description \n" + 
                               "             from fnd_user fu\n" + 
                               "           where 1=1 \n" + 
                               "              and user_id = fnd_profile.value('USER_ID')\n" + 
                               "           ) ejecutivo\n" + 
                               "         ,nvl(p.known_as,p.party_name) nombre_del_cliente\n" + 
                               "   from XXQP_PDFT_CLIENTES_INFO_V p\n" + 
                               "  where p.party_id = ? ";

              String strPartyId = pageContext.getParameter("pPartyId");/*"6041";*/
              if(null==strPartyId){
               throw new OAException("No se encontro valor del parametro pPartyId.",OAException.ERROR); 
              }else{
                  PartyIdBean.setValue(pageContext,strPartyId);
              }
              Double douPartyId = new Double(strPartyId);
              PreparedStatement prepStmt = null;
              ResultSet resultSet = null;
              try
              {
                prepStmt = connection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
                prepStmt.setDouble(1,douPartyId);
                resultSet = prepStmt.executeQuery();
                while(resultSet.next()){
                  
                  if(null!=FechaActualBean){
                      FechaActualBean.setValue(pageContext,resultSet.getString("fecha_actual"));
                  }
                  /** if(null!=EjecutivoBean){
                      EjecutivoBean.setValue(pageContext,resultSet.getString("ejecutivo"));
                  } NA 13072018 **/
                  if(null!=NombreDelClienteBean){
                      NombreDelClienteBean.setValue(pageContext,resultSet.getString("nombre_del_cliente"));
                  }
                  
                }
                
              } catch (SQLException sqle)
              {
               throw new OAException("EXCEPTION metodo fillCamposHead clase MasivoYPlatinumAMImpl:"+sqle.getErrorCode()+" , "+sqle.getMessage(),OAException.ERROR);
              }
             closeResultSet(resultSet);
             closePreparedStatement(prepStmt);
    
    }
    
    /**
       * Metodo que cierra un Result Set
       * @param pResultSet
       */
      private void closeResultSet(ResultSet pResultSet)
      {
        if(null!=pResultSet){
          try
          {
            pResultSet.close();
          } catch (SQLException sqle)
          {
           throw new OAException(sqle.getErrorCode()+ " , "+sqle.getMessage(),OAException.ERROR);
          }
        }
      }

      /**
       * Metodo que cierra un Prepared Statement
       * @param pPrepStmt
       */
      private void closePreparedStatement(PreparedStatement pPrepStmt)
      {
         if(null!=pPrepStmt){
          try
          {
            pPrepStmt.close();
          } catch (SQLException sqle)
          {
             throw new OAException(sqle.getErrorCode()+ " , "+sqle.getMessage(),OAException.ERROR);
          }
        }
      }

    

    public void fillHeader(StringBuilder pStrMasiYPlatHeaderId, 
                           String pStrContrato, 
                           String pStrContratoExamineFileName, 
                           String pStrContratoExamineContentType, 
                           BlobDomain pContratoExamineByteStream, 
                           String pStrEstatusValue, 
                           String pStrUnidadDeNegocioValue, 
                           String pStrEmpresaQueFacturaValue, 
                           String pStrCicloFacturacionValue, 
                           String pStrFechaInicioOperacionValue,
                           String pStrPartyID,
                           String pStrEjecutivoValue,
                           String pStrExamineFileName1, 
                           String pStrExamineContentType1, 
                           BlobDomain pExamineByteStream1, 
                           String pStrExamineFileName2, 
                           String pStrExamineContentType2, 
                           BlobDomain pExamineByteStream2, 
                           String pStrExamineFileName3, 
                           String pStrExamineContentType3, 
                           BlobDomain pExamineByteStream3 
                           ) {
     OADBTransaction oADBTransaction =this.getOADBTransaction();
     oracle.jbo.domain.Number numMasiYPlatHeaderId = oADBTransaction.getSequenceValue("XXQP_PDFT_MYP_HEADER_S");
     oracle.jbo.domain.Number numNumeroFt = oADBTransaction.getSequenceValue("XXQP_PDFT_NUMERO_FT_S");
     oracle.jbo.domain.Number numPartyId=null;

        try {
            numPartyId = new oracle.jbo.domain.Number(pStrPartyID);
        } catch (SQLException sqle) {
           throw new OAException("Excepcion metodo fillHeader attributo numPartyId.",OAException.ERROR);
        }
        XxqpPdftMypHeaderVOImpl xxqpPdftMypHeaderVOImpl = getXxqpPdftMypHeaderVO1(); 
     XxqpPdftMypHeaderVORowImpl xxqpPdftMypHeaderVORowImpl = null; 
     if(null!=xxqpPdftMypHeaderVOImpl){
      if(!xxqpPdftMypHeaderVOImpl.isPreparedForExecution()){
          xxqpPdftMypHeaderVOImpl.executeQuery();
      }
         xxqpPdftMypHeaderVORowImpl = (XxqpPdftMypHeaderVORowImpl)xxqpPdftMypHeaderVOImpl.createRow();
         xxqpPdftMypHeaderVORowImpl.setId(numMasiYPlatHeaderId);
         xxqpPdftMypHeaderVORowImpl.setNumeroFt(numNumeroFt);
         xxqpPdftMypHeaderVORowImpl.setRev(null);
         xxqpPdftMypHeaderVORowImpl.setStatus(pStrEstatusValue);
         xxqpPdftMypHeaderVORowImpl.setNumeroFtReferencia(null);
         xxqpPdftMypHeaderVORowImpl.setPartyId(numPartyId);
         xxqpPdftMypHeaderVORowImpl.setPdftClienteHeaderId(null);
         xxqpPdftMypHeaderVORowImpl.setEmpresaQueFacturaC(pStrEmpresaQueFacturaValue);
         xxqpPdftMypHeaderVORowImpl.setUnidadDeNegocioC(pStrUnidadDeNegocioValue);
         xxqpPdftMypHeaderVORowImpl.setFrecuenciaFacturacionC(pStrCicloFacturacionValue);
         xxqpPdftMypHeaderVORowImpl.setContratoFlag(pStrContrato);
         xxqpPdftMypHeaderVORowImpl.setContratoFileName(pStrContratoExamineFileName);
         xxqpPdftMypHeaderVORowImpl.setContratoContentType(pStrContratoExamineContentType);
         xxqpPdftMypHeaderVORowImpl.setContratoFile(pContratoExamineByteStream);
         if(null!=pStrFechaInicioOperacionValue){
         xxqpPdftMypHeaderVORowImpl.setFechaInicialOperacion(new oracle.jbo.domain.Date(pStrFechaInicioOperacionValue));
         }
         xxqpPdftMypHeaderVORowImpl.setEjecutivo(pStrEjecutivoValue);
         
         xxqpPdftMypHeaderVORowImpl.setFileName1(pStrExamineFileName1);
         xxqpPdftMypHeaderVORowImpl.setContentType1(pStrExamineContentType1);
         xxqpPdftMypHeaderVORowImpl.setFile1(pExamineByteStream1);
         
         xxqpPdftMypHeaderVORowImpl.setFileName2(pStrExamineFileName2);
         xxqpPdftMypHeaderVORowImpl.setContentType2(pStrExamineContentType2);
         xxqpPdftMypHeaderVORowImpl.setFile2(pExamineByteStream2);
         
         xxqpPdftMypHeaderVORowImpl.setFileName3(pStrExamineFileName3);
         xxqpPdftMypHeaderVORowImpl.setContentType3(pStrExamineContentType3);
         xxqpPdftMypHeaderVORowImpl.setFile3(pExamineByteStream3);
         
         xxqpPdftMypHeaderVOImpl.insertRow(xxqpPdftMypHeaderVORowImpl);
         
         oADBTransaction.commit();
         
         pStrMasiYPlatHeaderId.append(numMasiYPlatHeaderId.toString());
          
     }
    }


    public XxqpPdftMypHeaderVORowImpl initMypHeaderVO(String pStrMyPHeaderId) {
        XxqpPdftMypHeaderVORowImpl retval = null; 
        oracle.jbo.domain.Number numMyPHeaderId=null;
        try {
            numMyPHeaderId = new oracle.jbo.domain.Number(pStrMyPHeaderId);
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo initMypHeaderVO parametro pStrMyPHeaderId",OAException.ERROR); 
        }
        XxqpPdftMypHeaderVOImpl xxqpPdftMypHeaderVOImpl = getXxqpPdftMypHeaderVO1();
        XxqpPdftMypHeaderVORowImpl xxqpPdftMypHeaderVORowImpl = null; 
        if(null!=xxqpPdftMypHeaderVOImpl){
          if(!xxqpPdftMypHeaderVOImpl.isPreparedForExecution()){
              System.out.println("Va a entrar initByMyPHeaderId.");
              xxqpPdftMypHeaderVOImpl.initByMyPHeaderId(numMyPHeaderId);
          }
           RowSetIterator MypHeaderIterator = xxqpPdftMypHeaderVOImpl.createRowSetIterator(null);
           while(MypHeaderIterator.hasNext()){
               xxqpPdftMypHeaderVORowImpl = (XxqpPdftMypHeaderVORowImpl)MypHeaderIterator.next();
               retval = xxqpPdftMypHeaderVORowImpl;
               break;
           }
            MypHeaderIterator.closeRowSetIterator();
        }
       return retval;  
    }


    public void fillGeneral(StringBuilder pStrMasiYPlatHeaderId, 
                            String pStrImpresorValue, 
                            String pStrNombreProductoValue, 
                            String pStrVolumenAproxValue, 
                            String pStrTipoProductoValue, 
                            String pStrPesoProductoValue, 
                            String pStrPuntoDeRecoleccionValue, 
                            String pStrContactoParaCierreValue, 
                            String pStrPeriodicidadValue, 
                            String pStrDimensionesValue, 
                            String pStrTipoComisionValue, 
                            String pStrSeFacturaValue, 
                            String pStrFormatoParaCierreValue, 
                            String pStrDiasHabilesPagoValue, 
                            String pStrDiasRecepcionDeFacturacionValue, 
                            String pStrRequiereVoBoValue, 
                            String pStrTipoVoBoValue, 
                            String pStrTipoDeEntregaValue, 
                            String pStrPoliticaDeEntregaValue,
                            String pStrLunes,
                            String pStrMartes,
                            String pStrMiercoles,
                            String pStrJueves,
                            String pStrViernes,
                            String pStrSabado,
                            String pStrDomingo,
                            String pStrAcuseValue,
                            String pStrOrdinarioValue,
                            String pStrSemiAcuseValue) {                 
        oracle.jbo.domain.Number numMasiYPlatHeaderId=null;
        oracle.jbo.domain.Number numVolumenAproxValue = null;
        try {
           if(null!=pStrMasiYPlatHeaderId){
            numMasiYPlatHeaderId = new oracle.jbo.domain.Number(pStrMasiYPlatHeaderId.toString());
           }
           if(null!=pStrVolumenAproxValue){
            numVolumenAproxValue = new oracle.jbo.domain.Number(pStrVolumenAproxValue);
           }
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo fillGeneral parametro pStrMasiYPlatHeaderId",OAException.ERROR); 
        }
        
        OADBTransaction oADBTransaction =this.getOADBTransaction();
        
        
        XxqpPdftMypGeneralVOImpl xxqpPdftMypGeneralVOImpl = getXxqpPdftMypGeneralVO1();   
        XxqpPdftMypGeneralVORowImpl xxqpPdftMypGeneralVORowImpl = null; 
        if(null!=xxqpPdftMypGeneralVOImpl){
          if(!xxqpPdftMypGeneralVOImpl.isPreparedForExecution()){
              xxqpPdftMypGeneralVOImpl.executeQuery();
          }
          
          xxqpPdftMypGeneralVORowImpl = (XxqpPdftMypGeneralVORowImpl)xxqpPdftMypGeneralVOImpl.createRow();
          oracle.jbo.domain.Number numGeneralId = oADBTransaction.getSequenceValue("XXQP_PDFT_MYP_GENERAL_S");
          xxqpPdftMypGeneralVORowImpl.setId(numGeneralId);
          xxqpPdftMypGeneralVORowImpl.setMypHeaderId(numMasiYPlatHeaderId);
          xxqpPdftMypGeneralVORowImpl.setImpresor(pStrImpresorValue);
          xxqpPdftMypGeneralVORowImpl.setNombreProducto(pStrNombreProductoValue);
          xxqpPdftMypGeneralVORowImpl.setVolumenAprox(numVolumenAproxValue);
          xxqpPdftMypGeneralVORowImpl.setTipoProductoC(pStrTipoProductoValue);
          xxqpPdftMypGeneralVORowImpl.setPesoProductoC(pStrPesoProductoValue);
          xxqpPdftMypGeneralVORowImpl.setPuntoDeRecoleccion(pStrPuntoDeRecoleccionValue);
          xxqpPdftMypGeneralVORowImpl.setContactoParaCierre(pStrContactoParaCierreValue);
          xxqpPdftMypGeneralVORowImpl.setPeriodicidadC(pStrPeriodicidadValue);
          xxqpPdftMypGeneralVORowImpl.setDimensionesC(pStrDimensionesValue);
          xxqpPdftMypGeneralVORowImpl.setTipoComisionC(pStrTipoComisionValue);
          xxqpPdftMypGeneralVORowImpl.setSeFacturaC(pStrSeFacturaValue); 
          xxqpPdftMypGeneralVORowImpl.setFormatoParaCierreC(pStrFormatoParaCierreValue);
          xxqpPdftMypGeneralVORowImpl.setDiasHabilesPago(pStrDiasHabilesPagoValue);  
          xxqpPdftMypGeneralVORowImpl.setDiasRecepcionFaturacion(pStrDiasRecepcionDeFacturacionValue);
          xxqpPdftMypGeneralVORowImpl.setRequiereVoboC(pStrRequiereVoBoValue);
          xxqpPdftMypGeneralVORowImpl.setTipoVobo(pStrTipoVoBoValue);  
          xxqpPdftMypGeneralVORowImpl.setTipoDeEntregaC(pStrTipoDeEntregaValue);
          xxqpPdftMypGeneralVORowImpl.setPoliticaDeEntregaC(pStrPoliticaDeEntregaValue);  
          xxqpPdftMypGeneralVORowImpl.setLunes(pStrLunes); 
          xxqpPdftMypGeneralVORowImpl.setMartes(pStrMartes); 
          xxqpPdftMypGeneralVORowImpl.setMiercoles(pStrMiercoles);
          xxqpPdftMypGeneralVORowImpl.setJueves(pStrJueves);
          xxqpPdftMypGeneralVORowImpl.setViernes(pStrViernes);
          xxqpPdftMypGeneralVORowImpl.setSabado(pStrSabado);
          xxqpPdftMypGeneralVORowImpl.setDomingo(pStrDomingo);
          xxqpPdftMypGeneralVORowImpl.setAcuseC(pStrAcuseValue);
          xxqpPdftMypGeneralVORowImpl.setOrdinarioC(pStrOrdinarioValue);
          xxqpPdftMypGeneralVORowImpl.setSemiAcuseC(pStrSemiAcuseValue);
            
          xxqpPdftMypGeneralVOImpl.insertRow(xxqpPdftMypGeneralVORowImpl);
          oADBTransaction.commit(); 
        }
    } /** END fillGeneral **/


    public XxqpPdftMypGeneralVORowImpl initMypGeneralVO(String pStrMyPHeaderId) {
        XxqpPdftMypGeneralVORowImpl retval  = null;
        oracle.jbo.domain.Number numMyPHeaderId=null;
        try {
            numMyPHeaderId = new oracle.jbo.domain.Number(pStrMyPHeaderId);
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo initMypGeneralVO parametro pStrClientesHeaderId",OAException.ERROR); 
        }
        XxqpPdftMypGeneralVOImpl xxqpPdftMypGeneralVOImpl  = getXxqpPdftMypGeneralVO1();
        XxqpPdftMypGeneralVORowImpl xxqpPdftMypGeneralVORowImpl  = null;
        if(null!=xxqpPdftMypGeneralVOImpl){
          if(!xxqpPdftMypGeneralVOImpl.isPreparedForExecution()){
            xxqpPdftMypGeneralVOImpl.initByMyPHeaderId(numMyPHeaderId);
          } 
          
          RowSetIterator MypGeneralIterator =  xxqpPdftMypGeneralVOImpl.createRowSetIterator(null);
          while(MypGeneralIterator.hasNext()){
             xxqpPdftMypGeneralVORowImpl = (XxqpPdftMypGeneralVORowImpl)MypGeneralIterator.next();
             retval = xxqpPdftMypGeneralVORowImpl; 
             break;
          }
          MypGeneralIterator.closeRowSetIterator();
          
        }
        return retval;
    } /** END  public void initMypGeneralVO(String pStrMyPHeaderId) { **/


    public void fillCobertura(StringBuilder pStrMasiYPlatHeaderId, 
                              String pStrPlazaPropietariaValue, 
                             /** String pStrTipoCoberturaValue, **/
                              String pStrTiCobNacional,
                              String pStrTiCobRegional,
                              String pStrTiCobLocal,
                              String pStrMencionarEstadosValue, 
                              String pStrEntregaLocalValue, 
                              String pStrDRLocalValue,
                              String pStrDILocalValue, 
                              String pStrEntregaForaneoValue, 
                              String pStrDRForaneoValue, 
                              String pStrDIForaneoValue, 
                              String pStrComentarios,
                              String pStrComentariosIlim) {
     OADBTransaction oADBTransaction =this.getOADBTransaction();   
     oracle.jbo.domain.Number numMasiYPlatHeaderId = null; 
     oracle.jbo.domain.Number numEntregaLocal = null; 
     oracle.jbo.domain.Number numDRLocal = null; 
     oracle.jbo.domain.Number numDILocal = null; 
     oracle.jbo.domain.Number numEntregaForaneo = null; 
     oracle.jbo.domain.Number numDRForaneo = null; 
     oracle.jbo.domain.Number numDIForaneo = null; 
        
     try{
        if(null!=pStrMasiYPlatHeaderId)
         numMasiYPlatHeaderId = new oracle.jbo.domain.Number(pStrMasiYPlatHeaderId.toString()); 
         if(null!=pStrEntregaLocalValue)
         numEntregaLocal = new oracle.jbo.domain.Number(pStrEntregaLocalValue); 
         if(null!=pStrDRLocalValue)
         numDRLocal = new oracle.jbo.domain.Number(pStrDRLocalValue); 
         if(null!=pStrDILocalValue)
         numDILocal = new oracle.jbo.domain.Number(pStrDILocalValue); 
         if(null!=pStrEntregaForaneoValue)
         numEntregaForaneo = new oracle.jbo.domain.Number(pStrEntregaForaneoValue); 
         if(null!=pStrDRForaneoValue)
         numDRForaneo = new oracle.jbo.domain.Number(pStrDRForaneoValue); 
         if(null!=pStrDIForaneoValue)
         numDIForaneo = new oracle.jbo.domain.Number(pStrDIForaneoValue); 
     }catch(SQLException sqle){
      throw new OAException("Excepcion al convertir a numerico metodo fillCobertura.",OAException.ERROR); 
     }
    
     XxqpPdftMypCoberturaVOImpl xxqpPdftMypCoberturaVOImpl = getXxqpPdftMypCoberturaVO1();
     XxqpPdftMypCoberturaVORowImpl xxqpPdftMypCoberturaVORowImpl = null; 
     if(null!=xxqpPdftMypCoberturaVOImpl){
      if(!xxqpPdftMypCoberturaVOImpl.isPreparedForExecution()){
          xxqpPdftMypCoberturaVOImpl.executeQuery();
      }
         
         
         xxqpPdftMypCoberturaVORowImpl = (XxqpPdftMypCoberturaVORowImpl)xxqpPdftMypCoberturaVOImpl.createRow();
         oracle.jbo.domain.Number numIdCobertura = oADBTransaction.getSequenceValue("XXQP_PDFT_MYP_COBERTURA_S");
         xxqpPdftMypCoberturaVORowImpl.setId(numIdCobertura);
         xxqpPdftMypCoberturaVORowImpl.setMypHeaderId(numMasiYPlatHeaderId);
         xxqpPdftMypCoberturaVORowImpl.setPlazaPropietariaC(pStrPlazaPropietariaValue);
        /** xxqpPdftMypCoberturaVORowImpl.setTipoCoberturaC(pStrTipoCoberturaValue); **/
         xxqpPdftMypCoberturaVORowImpl.setTcNacional(pStrTiCobNacional);
         xxqpPdftMypCoberturaVORowImpl.setTcRegional(pStrTiCobRegional);
         xxqpPdftMypCoberturaVORowImpl.setTcLocal(pStrTiCobLocal);
         xxqpPdftMypCoberturaVORowImpl.setMencionarEstados(pStrMencionarEstadosValue);
         xxqpPdftMypCoberturaVORowImpl.setEntregaLocal(numEntregaLocal);
         xxqpPdftMypCoberturaVORowImpl.setDrLocal(numDRLocal);
         xxqpPdftMypCoberturaVORowImpl.setDiLocal(numDILocal);
         xxqpPdftMypCoberturaVORowImpl.setEntregaForaneo(numEntregaForaneo);
         xxqpPdftMypCoberturaVORowImpl.setDrForaneo(numDRForaneo);
         xxqpPdftMypCoberturaVORowImpl.setDiForaneo(numDIForaneo);
         xxqpPdftMypCoberturaVORowImpl.setComentarios(pStrComentarios);
         if(null!=pStrComentariosIlim&&!"".equals(pStrComentariosIlim)){
             xxqpPdftMypCoberturaVORowImpl.setComentariosIlim(new oracle.jbo.domain.ClobDomain(pStrComentariosIlim));
         }else{
             xxqpPdftMypCoberturaVORowImpl.setComentariosIlim(null);
             
         }
         
         xxqpPdftMypCoberturaVOImpl.insertRow(xxqpPdftMypCoberturaVORowImpl);
         
         oADBTransaction.commit();
     }
    }

    public void initMypCoberturaVO(String pStrMyPHeaderId) {
        oracle.jbo.domain.Number numMyPHeaderId=null;
        try {
            numMyPHeaderId = new oracle.jbo.domain.Number(pStrMyPHeaderId);
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo initMypCoberturaVO parametro pStrClientesHeaderId",OAException.ERROR); 
        }
        XxqpPdftMypCoberturaVOImpl xxqpPdftMypCoberturaVOImpl = getXxqpPdftMypCoberturaVO1();
        if(null!=xxqpPdftMypCoberturaVOImpl){
            xxqpPdftMypCoberturaVOImpl.initByMyPHeaderId(numMyPHeaderId);
        }
    }


    public void fillDistribucion(StringBuilder pStrMasiYPlatHeaderId, 
                                 String pStrDigitalizacionDeAcusesValue, 
                                 String pStrCapturaDeDevolucionesValue, 
                                 String pStrReporteGPSValue, 
                                 String pStrReporteDeRecepcionValue, 
                                 String pStrCapturaDeAcusesValue, 
                                 String pStrSeguimientoDeQuejasValue, 
                                 String pStrProporcionamosInsumosValue, 
                                 String pStrEtiquetadoValue, 
                                 String pStrEnsobretadoValue, 
                                 String pStrGeneracionDeAcuseValue, 
                                 String pStrDiasOperacionLocalValue, 
                                 String pStrDiasOperacionForaneoValue, 
                                 String pStrCierreElectronicoValue, 
                                 String pStrEnvioPiezasFisicasValue, 
                                 String pStrComentariosSobreDistribucionValue,
                                 String strComentariosSobreDistribucionIlimValue) {
        oracle.jbo.domain.Number numMasiYPlatHeaderId = null; 
        oracle.jbo.domain.Number numDiasOperacionLocal = null; 
        oracle.jbo.domain.Number numDiasOperacionForaneo = null; 
        oracle.jbo.domain.Number numCierreElectronico = null; 
        oracle.jbo.domain.Number numEnvioPiezasFisicas = null; 
        
        try{
        if(null!=pStrMasiYPlatHeaderId)
        numMasiYPlatHeaderId = new oracle.jbo.domain.Number(pStrMasiYPlatHeaderId.toString()); 
        if(null!=pStrDiasOperacionLocalValue)
        numDiasOperacionLocal = new oracle.jbo.domain.Number(pStrDiasOperacionLocalValue); 
        if(null!=pStrDiasOperacionForaneoValue)
        numDiasOperacionForaneo = new oracle.jbo.domain.Number(pStrDiasOperacionForaneoValue);
        if(null!=pStrCierreElectronicoValue)
        numCierreElectronico = new oracle.jbo.domain.Number(pStrCierreElectronicoValue);
        if(null!=pStrEnvioPiezasFisicasValue)
        numEnvioPiezasFisicas = new oracle.jbo.domain.Number(pStrEnvioPiezasFisicasValue); 
        }catch(SQLException sqle){
            throw new OAException("Excepcion al convertir a numerico metodo fillDistribucion.",OAException.ERROR);
        }                         
        OADBTransaction oADBTransaction =this.getOADBTransaction();       
        XxqpPdftMypDistribucionVOImpl xxqpPdftMypDistribucionVOImpl = getXxqpPdftMypDistribucionVO1();
        XxqpPdftMypDistribucionVORowImpl xxqpPdftMypDistribucionVORowImpl = null; 
        if(null!=xxqpPdftMypDistribucionVOImpl){
         if(!xxqpPdftMypDistribucionVOImpl.isPreparedForExecution()){
             xxqpPdftMypDistribucionVOImpl.executeQuery();
         }
            xxqpPdftMypDistribucionVORowImpl = (XxqpPdftMypDistribucionVORowImpl)xxqpPdftMypDistribucionVOImpl.createRow();
            oracle.jbo.domain.Number numDistribucionID = oADBTransaction.getSequenceValue("XXQP_PDFT_MYP_DISTRIBUCION_S");
            xxqpPdftMypDistribucionVORowImpl.setId(numDistribucionID);
            xxqpPdftMypDistribucionVORowImpl.setMypHeaderId(numMasiYPlatHeaderId);
            xxqpPdftMypDistribucionVORowImpl.setDigitalizacionAcuses(pStrDigitalizacionDeAcusesValue);
            xxqpPdftMypDistribucionVORowImpl.setCapturaDevoluciones(pStrCapturaDeDevolucionesValue);
            xxqpPdftMypDistribucionVORowImpl.setReporteGps(pStrReporteGPSValue);
            xxqpPdftMypDistribucionVORowImpl.setReporteRecepcion(pStrReporteDeRecepcionValue);
            xxqpPdftMypDistribucionVORowImpl.setCapturaAcuses(pStrCapturaDeAcusesValue);
            xxqpPdftMypDistribucionVORowImpl.setSeguimientoQuejas(pStrSeguimientoDeQuejasValue);
            xxqpPdftMypDistribucionVORowImpl.setProporcionamosInsumos(pStrProporcionamosInsumosValue);
            xxqpPdftMypDistribucionVORowImpl.setEtiquetado(pStrEtiquetadoValue);
            xxqpPdftMypDistribucionVORowImpl.setEnsobretado(pStrEnsobretadoValue);
            xxqpPdftMypDistribucionVORowImpl.setGeneracionAcuse(pStrGeneracionDeAcuseValue);
            xxqpPdftMypDistribucionVORowImpl.setDiasOperacionLocal(numDiasOperacionLocal);
            xxqpPdftMypDistribucionVORowImpl.setDiasOperacionForaneo(numDiasOperacionForaneo);
            xxqpPdftMypDistribucionVORowImpl.setCierreElectronico(numCierreElectronico);
            xxqpPdftMypDistribucionVORowImpl.setEnvioPiezasFisicas(numEnvioPiezasFisicas);
            xxqpPdftMypDistribucionVORowImpl.setComentariosDistribucion(pStrComentariosSobreDistribucionValue); 
            if(null!=strComentariosSobreDistribucionIlimValue&&!"".equals(strComentariosSobreDistribucionIlimValue)){
              xxqpPdftMypDistribucionVORowImpl.setComentariosDistribucionIlim(new oracle.jbo.domain.ClobDomain(strComentariosSobreDistribucionIlimValue));
             }else{
              xxqpPdftMypDistribucionVORowImpl.setComentariosDistribucionIlim(null);
            }
            
            xxqpPdftMypDistribucionVOImpl.insertRow(xxqpPdftMypDistribucionVORowImpl);
            oADBTransaction.commit();
        }
    }


    public void initMypDistribucionVO(String pStrMyPHeaderId) {
        oracle.jbo.domain.Number numMyPHeaderId=null;
        try {
            numMyPHeaderId = new oracle.jbo.domain.Number(pStrMyPHeaderId);
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo initMypCoberturaVO parametro pStrClientesHeaderId",OAException.ERROR); 
        }
        XxqpPdftMypDistribucionVOImpl xxqpPdftMypDistribucionVOImpl = getXxqpPdftMypDistribucionVO1();
        if(null!=xxqpPdftMypDistribucionVOImpl){
            xxqpPdftMypDistribucionVOImpl.initByMyPHeaderId(numMyPHeaderId);
        }
    }

    

    public void initProcesosTmpVO() {
        ProcesosTmpVOImpl procesosTmpVOImpl =getProcesosTmpVO1();
        if(null!=procesosTmpVOImpl){
         if(!procesosTmpVOImpl.isPreparedForExecution()){
             procesosTmpVOImpl.executeQuery();
         }
        }
    }


    public void initOtrosProcesosTmpVO() {
        OtrosProcesosTmpVOImpl otrosProcesosTmpVOImpl = getOtrosProcesosTmpVO1();
        if(null!=otrosProcesosTmpVOImpl){
         if(!otrosProcesosTmpVOImpl.isPreparedForExecution()){
             otrosProcesosTmpVOImpl.executeQuery();
         }
        }
    }


    public void fillProcesosCorreoDirecto(StringBuilder pStrMasiYPlatHeaderId, 
                                          String pStrComentariosOInstrucciones,
                                          String pStrComentariosOInstruccionesIlim) {
    oracle.jbo.domain.Number numMasiYPlatHeaderId=null;
    try {
        numMasiYPlatHeaderId = new oracle.jbo.domain.Number(pStrMasiYPlatHeaderId.toString());
    } catch (SQLException sqle) {
        throw new OAException("SQLException metodo fillProcesosCorreoDirecto parametro pStrMasiYPlatHeaderId",OAException.ERROR); 
    }
    
    OADBTransaction oADBTransaction =this.getOADBTransaction(); 
        
    ProcesosTmpVOImpl procesosTmpVOImpl = getProcesosTmpVO1();      
    ProcesosTmpVORowImpl procesosTmpVORowImpl = null; 
    XxqpPdftMypProcesosVOImpl xxqpPdftMypProcesosVOImpl = getXxqpPdftMypProcesosVO1();      
    XxqpPdftMypProcesosVORowImpl xxqpPdftMypProcesosVORowImpl = null; 
    if(null!=procesosTmpVOImpl){
      RowSetIterator iterProcesos =  procesosTmpVOImpl.createRowSetIterator(null); 
      while(iterProcesos.hasNext()){
          procesosTmpVORowImpl = (ProcesosTmpVORowImpl)iterProcesos.next();
          if(null!=xxqpPdftMypProcesosVOImpl){
            if(!xxqpPdftMypProcesosVOImpl.isPreparedForExecution()){
                xxqpPdftMypProcesosVOImpl.executeQuery();
            }
              xxqpPdftMypProcesosVORowImpl = (XxqpPdftMypProcesosVORowImpl)xxqpPdftMypProcesosVOImpl.createRow();
              oracle.jbo.domain.Number numProcesoDeCorreoDirectoID = oADBTransaction.getSequenceValue("XXQP_PDFT_MYP_PROCESOS_S");
              xxqpPdftMypProcesosVORowImpl.setId(numProcesoDeCorreoDirectoID);
              xxqpPdftMypProcesosVORowImpl.setMypHeaderId(numMasiYPlatHeaderId);
              xxqpPdftMypProcesosVORowImpl.setRegion("PROCESO");
              xxqpPdftMypProcesosVORowImpl.setProseso(procesosTmpVORowImpl.getProceso());
              xxqpPdftMypProcesosVORowImpl.setSeleccionar(procesosTmpVORowImpl.getSeleccionar());
              xxqpPdftMypProcesosVORowImpl.setPrecio(procesosTmpVORowImpl.getPrecio());
              xxqpPdftMypProcesosVORowImpl.setPrecioProton(procesosTmpVORowImpl.getPrecioProton());
              xxqpPdftMypProcesosVOImpl.insertRow(xxqpPdftMypProcesosVORowImpl);
              
              oADBTransaction.commit();
          } 
      }  /** END  while(iterProcesos.hasNext()){ **/
       iterProcesos.closeRowSetIterator();
    } /** END if(null!=procesosTmpVOImpl){ **/
    
    
     OtrosProcesosTmpVOImpl otrosProcesosTmpVOImpl = getOtrosProcesosTmpVO1();
     OtrosProcesosTmpVORowImpl otrosProcesosTmpVORowImpl = null; 
     XxqpPdftMypOtrosProcesosVOImpl xxqpPdftMypOtrosProcesosVOImpl = getXxqpPdftMypOtrosProcesosVO1();
     XxqpPdftMypOtrosProcesosVORowImpl xxqpPdftMypOtrosProcesosVORowImpl = null; 
     if(null!=otrosProcesosTmpVOImpl){
        RowSetIterator iterOtrosProcesos = otrosProcesosTmpVOImpl.createRowSetIterator(null);
        while(iterOtrosProcesos.hasNext()){
            otrosProcesosTmpVORowImpl = (OtrosProcesosTmpVORowImpl)iterOtrosProcesos.next();
            if(null!=xxqpPdftMypOtrosProcesosVOImpl){
              if(!xxqpPdftMypOtrosProcesosVOImpl.isPreparedForExecution()){
                  xxqpPdftMypOtrosProcesosVOImpl.executeQuery();
              }
               xxqpPdftMypOtrosProcesosVORowImpl = (XxqpPdftMypOtrosProcesosVORowImpl)xxqpPdftMypOtrosProcesosVOImpl.createRow();
               oracle.jbo.domain.Number numProcesoDeCorreoDirectoID = oADBTransaction.getSequenceValue("XXQP_PDFT_MYP_PROCESOS_S");
               xxqpPdftMypOtrosProcesosVORowImpl.setId(numProcesoDeCorreoDirectoID);
               xxqpPdftMypOtrosProcesosVORowImpl.setMypHeaderId(numMasiYPlatHeaderId);
               xxqpPdftMypOtrosProcesosVORowImpl.setRegion("OTROS_PROCESOS");
               xxqpPdftMypOtrosProcesosVORowImpl.setOtrosProcesos(otrosProcesosTmpVORowImpl.getProceso());
               xxqpPdftMypOtrosProcesosVORowImpl.setSeleccionar(otrosProcesosTmpVORowImpl.getSeleccionar());
               xxqpPdftMypOtrosProcesosVORowImpl.setPrecio(otrosProcesosTmpVORowImpl.getPrecio());
               xxqpPdftMypOtrosProcesosVORowImpl.setPrecioProton(otrosProcesosTmpVORowImpl.getPrecioProton());
               xxqpPdftMypOtrosProcesosVOImpl.insertRow(xxqpPdftMypOtrosProcesosVORowImpl);
               
                oADBTransaction.commit();
            }
        } /** END while(iterOtrosProcesos.hasNext()){ **/
         iterOtrosProcesos.closeRowSetIterator();
     } /** END if(null!=otrosProcesosTmpVOImpl){ **/
     
      XxqpPdftMypComentsProcesosVOImpl xxqpPdftMypComentsProcesosVOImpl = getXxqpPdftMypComentsProcesosVO1();
      XxqpPdftMypComentsProcesosVORowImpl xxqpPdftMypComentsProcesosVORowImpl = null; 
      if(null!=xxqpPdftMypComentsProcesosVOImpl){
        if(!xxqpPdftMypComentsProcesosVOImpl.isPreparedForExecution()){
            xxqpPdftMypComentsProcesosVOImpl.executeQuery();
        }
         xxqpPdftMypComentsProcesosVORowImpl = (XxqpPdftMypComentsProcesosVORowImpl)xxqpPdftMypComentsProcesosVOImpl.createRow();
         oracle.jbo.domain.Number numProcesoDeCorreoDirectoID = oADBTransaction.getSequenceValue("XXQP_PDFT_MYP_PROCESOS_S");
          xxqpPdftMypComentsProcesosVORowImpl.setId(numProcesoDeCorreoDirectoID);
          xxqpPdftMypComentsProcesosVORowImpl.setMypHeaderId(numMasiYPlatHeaderId);
          xxqpPdftMypComentsProcesosVORowImpl.setRegion("COMENTARIOS");
          xxqpPdftMypComentsProcesosVORowImpl.setComentariosInstrucc(pStrComentariosOInstrucciones);
          if(null!=pStrComentariosOInstruccionesIlim&&!"".equals(pStrComentariosOInstruccionesIlim)){
              xxqpPdftMypComentsProcesosVORowImpl.setComentariosInstruccIlim(new oracle.jbo.domain.ClobDomain(pStrComentariosOInstruccionesIlim));
          }else{
           xxqpPdftMypComentsProcesosVORowImpl.setComentariosInstruccIlim(null);
          }
          xxqpPdftMypComentsProcesosVOImpl.insertRow(xxqpPdftMypComentsProcesosVORowImpl);
          oADBTransaction.commit();
          
        
      } /** END if(null!=xxqpPdftMypComentsProcesosVOImpl){ **/
    
    }


    public void initMypProcesosVO(String pStrMyPHeaderId) {
        oracle.jbo.domain.Number numMyPHeaderId=null;
        try {
            numMyPHeaderId = new oracle.jbo.domain.Number(pStrMyPHeaderId);
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo initMypCoberturaVO parametro pStrClientesHeaderId",OAException.ERROR); 
        }
        XxqpPdftMypProcesosVOImpl xxqpPdftMypProcesosVOImpl = getXxqpPdftMypProcesosVO1(); 
        if(null!=xxqpPdftMypProcesosVOImpl){
          if(!xxqpPdftMypProcesosVOImpl.isPreparedForExecution()){
              xxqpPdftMypProcesosVOImpl.initByMyPHeaderId(numMyPHeaderId);
          }
        }
        
    }

   
    public void initMypOtrosProcesosVO(String pStrMyPHeaderId) {
        oracle.jbo.domain.Number numMyPHeaderId=null;
        try {
            numMyPHeaderId = new oracle.jbo.domain.Number(pStrMyPHeaderId);
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo initMypCoberturaVO parametro pStrClientesHeaderId",OAException.ERROR); 
        }
        XxqpPdftMypOtrosProcesosVOImpl xxqpPdftMypOtrosProcesosVOImpl = getXxqpPdftMypOtrosProcesosVO1(); 
        if(null!=xxqpPdftMypOtrosProcesosVOImpl){
          if(!xxqpPdftMypOtrosProcesosVOImpl.isPreparedForExecution()){
              xxqpPdftMypOtrosProcesosVOImpl.initByMyPHeaderId(numMyPHeaderId);
          }
        }
    }

   

    public void initMypComentsProcesosVO(String pStrMyPHeaderId) {
        oracle.jbo.domain.Number numMyPHeaderId=null;
        try {
            numMyPHeaderId = new oracle.jbo.domain.Number(pStrMyPHeaderId);
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo initMypCoberturaVO parametro pStrClientesHeaderId",OAException.ERROR); 
        }
        XxqpPdftMypComentsProcesosVOImpl xxqpPdftMypComentsProcesosVOImpl = getXxqpPdftMypComentsProcesosVO1();
        if(null!=xxqpPdftMypComentsProcesosVOImpl){
          if(!xxqpPdftMypComentsProcesosVOImpl.isPreparedForExecution()){
              xxqpPdftMypComentsProcesosVOImpl.initByMyPHeaderId(numMyPHeaderId);
          }
        }
    }



    public void initMypHeaderTmpVO() {
      System.out.println("Entra initMypHeaderTmpVO");
        MypHeaderTmpVOImpl mypHeaderTmpVOImpl = getMypHeaderTmpVO1(); 
        if(1==mypHeaderTmpVOImpl.getFetchedRowCount()){
         return;
        }
        MypHeaderTmpVORowImpl mypHeaderTmpVORowImpl = null;
        if(null!=mypHeaderTmpVOImpl){
         if(!mypHeaderTmpVOImpl.isPreparedForExecution()){
             mypHeaderTmpVOImpl.executeQuery();
         }
             mypHeaderTmpVORowImpl = (MypHeaderTmpVORowImpl)mypHeaderTmpVOImpl.createRow();
             mypHeaderTmpVOImpl.insertRow(mypHeaderTmpVORowImpl);
        } /** END if(null!=mypHeaderTmpVOImpl){ **/
     }

    public void salvarTransaccion() {
    OADBTransaction  oADBTransaction = this.getOADBTransaction();
        oADBTransaction.commit();
    }

    public String executeMypGetInfo(String pModificacion) {
        String retval = null; 
        String strCallableStmt = " BEGIN \n" + 
                                 "  APPS.XXQP_PDFT_MYP_PKG.GET_INFO ( PSO_ERRMSG             => :1\n" + 
                                 "                                  , PSO_ERRCOD             => :2\n" + 
                                 "                                  , PCO_INFO               => :3\n" + 
                                 "                                  , PNI_MYP_HEADER_ID      => :4\n" + 
                                 "                                  , PSI_MODIF              => :5\n" + 
                                 "                                  );\n" + 
                                 " END; \n";
        OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
        OracleCallableStatement oraclecallablestatement =  (OracleCallableStatement)oadbtransaction.createCallableStatement(strCallableStmt, 1);
        oracle.jbo.domain.Number numMypHeaderId = (oracle.jbo.domain.Number)this.getXxqpPdftMypHeaderVO1().getCurrentRow().getAttribute("Id");
        try {
            oraclecallablestatement.registerOutParameter(1,Types.VARCHAR);
            oraclecallablestatement.registerOutParameter(2,Types.VARCHAR);
            oraclecallablestatement.registerOutParameter(3,Types.CLOB);
            oraclecallablestatement.setDouble(4,numMypHeaderId.doubleValue());
            oraclecallablestatement.setString(5,pModificacion);
            oraclecallablestatement.execute();
            java.sql.Clob retvalClob = oraclecallablestatement.getClob(3);
            java.io.Reader reader =retvalClob.getCharacterStream();
            java.io.BufferedReader bufferReader = new java.io.BufferedReader(reader);
            String retvalxml = "";
            String line = null; 
            while((line = bufferReader.readLine())!=null){
                retvalxml = retvalxml+line;
            }
            
            /** System.out.println(retvalxml); **/
            retval = retvalxml;
            bufferReader.close();
            reader.close();
                        
        } catch (SQLException e) {
            System.out.println("SQLException en el metodo executeMypGetInfo:"+e.getErrorCode()+", "+e.getMessage());
            throw new OAException("SQLException en el metodo executeMypGetInfo:"+e.getErrorCode(),OAException.ERROR); 
        }catch (IOException ioe) {
            System.out.println("IOException en el metodo executeMypGetInfo:"+ioe.getMessage());
            throw new OAException("IOException en el metodo executeMypGetInfo:"+ioe.getMessage(),OAException.ERROR);
        }
      
      return retval;   
        
    } /** END public String executeMypGetInfo() **/

    
    public String getUnidadNegocioM(String pStrPUnidadDeNegocio) {
       
        String retval = null;
        OADBTransaction  oADBTransaction = this.getOADBTransaction();

        Connection connection =   oADBTransaction.getJdbcConnection();
          String strPrepStmt = " select  lookup_code " + 
                               "         ,description meaning " + 
                               "   from xxqp_pdft_mgr_catalogos " + 
                               " where lookup_type = 'UNIDAD_DE_NEGOCIO' " + 
                               "   and nvl(status,'X') = 'Y' " +
                               "   and lookup_code = ?";

           
              PreparedStatement prepStmt = null;
              ResultSet resultSet = null;
              try
              {
                prepStmt = connection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
                prepStmt.setString(1,pStrPUnidadDeNegocio);
                resultSet = prepStmt.executeQuery();
                while(resultSet.next()){
                    retval = resultSet.getString("meaning");       
                }
                
              } catch (SQLException sqle)
              {
               throw new OAException("EXCEPTION metodo getUnidadNegocioM clase MasivoYPlatinumAMImpl:"+sqle.getErrorCode()+" , "+sqle.getMessage(),OAException.ERROR);
              }
             closeResultSet(resultSet);
             closePreparedStatement(prepStmt);
         return retval; 
    }

    public String enviaCorreos(InputStream pInputStream
                               ,oracle.jbo.domain.Number pNumeroFtRef
                               ,String pStatusFt
                               ,oracle.jbo.domain.Number pNumeroFt
                               ,OAPageContext pageContext
                               ,String pNombreDelCliente
                               ,String pArticuloOracle
                               ,XxqpPdftMypHeaderVORowImpl pXxqpPdftMypHeaderVORowImpl
                               ) {
        System.out.println("Entra enviaCorreos");
        String retval = null;
        OADBTransaction  oADBTransaction = this.getOADBTransaction();
        String strCrearFlag = "N"; 
        String strActualizarFlag = "N"; 
        oracle.jbo.domain.Number ref = new oracle.jbo.domain.Number(0);
        String strNumeroFt = ""; 
        if(null!=pNumeroFt){
            strNumeroFt = pNumeroFt.toString();
        }
        String strSubject =""; 
        String strBody="";
        MessageToken[] msgtoken1 = {new MessageToken("NO_FT",strNumeroFt)};
        MessageToken[] msgtoken2 = {new MessageToken("NO_FT",strNumeroFt)
                                   ,new MessageToken("NOMBRE_CLIENTE",pNombreDelCliente)
                                   ,new MessageToken("PRODUCT_ID",pArticuloOracle)
                                   };
        
        if(ref.compareTo(pNumeroFtRef)!=0&&"CAMBIO_DE_PRECIO".equals(pStatusFt)){
            strActualizarFlag = "Y";
            strSubject = pageContext.getMessage("XXQP","XXQP_PDFT_CAMBI_FT_SUBJECT_MSG",msgtoken1);
            strBody = pageContext.getMessage("XXQP","XXQP_PDFT_CAMBIO_FT_BODY_MSG",msgtoken2);
            strBody = strBody+"\n\nMODIFICACIONES REALIZADAS:\n";
            if(null!=pXxqpPdftMypHeaderVORowImpl.getModifRealiz()){
                strBody = strBody+pXxqpPdftMypHeaderVORowImpl.getModifRealiz().toString();
            }
        }else if(ref.compareTo(pNumeroFtRef)==0){
            strCrearFlag = "Y";
            strSubject = pageContext.getMessage("XXQP","XXQP_PDFT_ALTA_FT_SUBJECT_MSG",msgtoken1);
            strBody = pageContext.getMessage("XXQP","XXQP_PDFT_ALTA_FT_BODY_MSG",msgtoken2);
        }else{
            strCrearFlag = "Y";
            strSubject = pageContext.getMessage("XXQP","XXQP_PDFT_ALTA_FT_SUBJECT_MSG",msgtoken1);
            strBody = pageContext.getMessage("XXQP","XXQP_PDFT_ALTA_FT_BODY_MSG",msgtoken2);
        }

        Connection connection =   oADBTransaction.getJdbcConnection();
          String strPrepStmt = " SELECT ID                     \n" + 
                               "        ,RESPONSABILIDAD   \n" + 
                               "        ,USUARIO               \n" + 
                               "        ,AREA                  \n" + 
                               "        ,CORREO               \n" + 
                               "        ,IS_ENABLED               \n" + 
                               "        ,CREATED_BY               \n" + 
                               "        ,CREATION_DATE          \n" + 
                               "        ,LAST_UPDATED_BY        \n" + 
                               "        ,LAST_UPDATE_DATE      \n" + 
                               "        ,LAST_UPDATE_LOGIN     \n" + 
                               "        ,ATTRIBUTE_CATEGORY    \n" + 
                               "        ,ATTRIBUTE1            \n" + 
                               "        ,ATTRIBUTE2            \n" + 
                               "        ,ATTRIBUTE3            \n" + 
                               "        ,ATTRIBUTE4            \n" + 
                               "        ,ATTRIBUTE5            \n" + 
                               " FROM  XXQP_PDFT_DISTRIBUCION\n" + 
                               " WHERE IS_ENABLED = 'Y' ";
                if("Y".equals(strCrearFlag)){
                    strPrepStmt =strPrepStmt+" AND ATTRIBUTE1 ='Y'";
                }else if("Y".equals(strActualizarFlag)){
                    strPrepStmt =strPrepStmt+" AND ATTRIBUTE2 ='Y'";
                }
           
              int count = 0; 
              PreparedStatement prepStmt = null;
              ResultSet resultSet = null;
              try
              {
                prepStmt = connection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
                resultSet = prepStmt.executeQuery();
                while(resultSet.next()){
                    String strCorreo = null; 
                    strCorreo = resultSet.getString("CORREO");  
                    if(count>0){
                        retval = retval+","+strCorreo;
                    }else if(count==0){
                        retval = strCorreo; 
                    }
                   count = count +1; 
               }
                
             } catch (SQLException sqle)
             {
              throw new OAException("EXCEPTION metodo enviaCorreos clase MasivoYPlatinumAMImpl:"+sqle.getErrorCode()+" , "+sqle.getMessage(),OAException.ERROR);
             }
            closeResultSet(resultSet);
            closePreparedStatement(prepStmt);
         
       
        java.util.Map<String,String> map = new java.util.HashMap<String,String>();
        map.put("Responsablidad",""); 
        map.put("Usuario",""); 
        map.put("Area",""); 
        map.put("Correo",retval); 
        map.put("strSubject",strSubject);
        map.put("strBody",strBody);
        map.put("strCrearFlag",strCrearFlag);
        map.put("strNumeroFt",strNumeroFt); 
        if(count>0){
        testDeliveryManager(pInputStream,map,pXxqpPdftMypHeaderVORowImpl);
        }
        
         return retval; 
         
    }
    
    private void testDeliveryManager(InputStream inputStream, 
                                     Map<String, String> map,
                                     XxqpPdftMypHeaderVORowImpl pXxqpPdftMypHeaderVORowImpl) {
        System.out.println("Entra testDeliveryManager.");
        String strCorreo = map.get("Correo");
        String strSubject = map.get("strSubject"); 
        String strBody = map.get("strBody"); 
        String strCrearFlag = map.get("strCrearFlag"); 
        String strNumeroFt = map.get("strNumeroFt"); 
        /***************************************************************************************************
        DeliveryManager deliveryManager = null;
        DeliveryRequest deliveryRequest = null; 
        try {
            deliveryManager = new DeliveryManager();
            deliveryRequest = deliveryManager.createRequest(DeliveryManager.TYPE_SMTP_EMAIL);
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_SUBJECT,"Test Delivery Manager");
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_HOST,"mail.qualitypost.com.mx");
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_PORT,"1825");
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_FROM,MasivoYPlatinumAMImpl.strXxqpPdftEmail);
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_USERNAME,MasivoYPlatinumAMImpl.strXxqpPdftEmail);
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_PASSWORD,MasivoYPlatinumAMImpl.strXxqpPdftEmailPwd);
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_TO_RECIPIENTS,strCorreo);
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_CONTENT_FILENAME,"AltaFichaTecnicaMyP.pdf");
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_CONTENT_TYPE,"application/pdf");
            deliveryRequest.setDocument(inputStream);
            deliveryRequest.submit(); 
            deliveryRequest.close();
        } catch (InvalidFactoryException e) {
           System.out.println("InvalidFactoryException:"+e.getMessage());
        } catch (UndefinedRequestTypeException e) {
            System.out.println("UndefinedRequestTypeException:"+e.getMessage());
        } catch (DeliveryException e) {
             System.out.println("DeliveryException:"+e.getMessage()+", "+e.getCause());
        }        
        ***********************************************************************************************/
        
          Properties properties =System.getProperties();
          properties.put("mail.smtp.auth","true");
          properties.put("mail.smtp.starttls.enable","true");
          properties.put("mail.smtp.host","mail.qualitypost.com.mx");
          properties.put("mail.smtp.port","465");
          properties.put("mail.smtp.socketFactory.port", "465"); /*SSL Port*/
          properties.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory"); /*SSL Factory Class*/
          
           strXxqpPdftEmail = this.getOADBTransaction().getProfile("XXQP_PDFT_EMAIL"); 
           strXxqpPdftEmailPwd = this.getOADBTransaction().getProfile("XXQP_PDFT_EMAIL_PWD");
          
          Session session = Session.getInstance(properties,new javax.mail.Authenticator(){
                                                          protected javax.mail.PasswordAuthentication getPasswordAuthentication(){
                                                           return new javax.mail.PasswordAuthentication (MasivoYPlatinumAMImpl.strXxqpPdftEmail,MasivoYPlatinumAMImpl.strXxqpPdftEmailPwd);
                                                          }
                                                          }
                                                 );
         /** session.setDebug(true);   120320211619 debug muy grande**/                                    
         Message message = new MimeMessage(session);
         try {
              message.setFrom( new InternetAddress(MasivoYPlatinumAMImpl.strXxqpPdftEmail));
              message.setRecipients(Message.RecipientType.TO,InternetAddress.parse(strCorreo));
              message.setSubject(strSubject);
              /* Create the message part */
                       BodyPart messageBodyPart = new MimeBodyPart();
              /* Now set the actual message */
                       messageBodyPart.setText(strBody);
              /* Create a multipar message */
                       Multipart multipart = new MimeMultipart();
                       /* Set text message part */
                       multipart.addBodyPart(messageBodyPart);
                       // Part two is attachment
                       messageBodyPart = new MimeBodyPart();
                       DataSource source = null; /**new FileDataSource(filename); **/
                         try {
                             source = new ByteArrayDataSource(inputStream,"application/pdf");
                         } catch (IOException e) {
                             // TODO
                         }
                       messageBodyPart.setDataHandler(new DataHandler(source));
                       if("Y".equals(strCrearFlag)){
                           messageBodyPart.setFileName("AltaFichaTecnicaMyP"+strNumeroFt+".pdf");
                       }else{
                           messageBodyPart.setFileName("CambioFichaTecnicaMyP"+strNumeroFt+".pdf");
                       }
                       multipart.addBodyPart(messageBodyPart);
                  // Part three is attachment
                   if(null!=pXxqpPdftMypHeaderVORowImpl.getContratoFileName()&&!"".equals(pXxqpPdftMypHeaderVORowImpl.getContratoFileName())){
                        try {
                            addAttachment(multipart
                                            ,pXxqpPdftMypHeaderVORowImpl.getContratoFile().getInputStream()
                                            ,pXxqpPdftMypHeaderVORowImpl.getContratoFileName()
                                            ,pXxqpPdftMypHeaderVORowImpl.getContratoContentType()
                                           );
                        } catch (IOException e) {
                           System.out.println("Exception Contrato:"+e.getMessage());
                        }
                   }
                   if(null!=pXxqpPdftMypHeaderVORowImpl.getFileName1()&&!"".equals(pXxqpPdftMypHeaderVORowImpl.getFileName1())){
                        try {
                            addAttachment(multipart
                                            ,pXxqpPdftMypHeaderVORowImpl.getFile1().getInputStream()
                                            ,pXxqpPdftMypHeaderVORowImpl.getFileName1()
                                            ,pXxqpPdftMypHeaderVORowImpl.getContentType1()
                                           );
                        } catch (IOException e) {
                           System.out.println("Exception File1:"+e.getMessage());
                        }
                  }
              if(null!=pXxqpPdftMypHeaderVORowImpl.getFileName2()&&!"".equals(pXxqpPdftMypHeaderVORowImpl.getFileName2())){
                   try {
                       addAttachment(multipart
                                       ,pXxqpPdftMypHeaderVORowImpl.getFile2().getInputStream()
                                       ,pXxqpPdftMypHeaderVORowImpl.getFileName2()
                                       ,pXxqpPdftMypHeaderVORowImpl.getContentType2()
                                      );
                   } catch (IOException e) {
                      System.out.println("Exception File2:"+e.getMessage());
                   }
              }
              if(null!=pXxqpPdftMypHeaderVORowImpl.getFileName3()&&!"".equals(pXxqpPdftMypHeaderVORowImpl.getFileName3())){
                   try {
                       addAttachment(multipart
                                       ,pXxqpPdftMypHeaderVORowImpl.getFile3().getInputStream()
                                       ,pXxqpPdftMypHeaderVORowImpl.getFileName3()
                                       ,pXxqpPdftMypHeaderVORowImpl.getContentType3()
                                      );
                   } catch (IOException e) {
                      System.out.println("Exception File3:"+e.getMessage());
                   }
              }

                       // Send the complete message parts
                       message.setContent(multipart);
              
              Transport.send(message);
          } catch (MessagingException me) {
              System.out.println("MessagingException:"+me.getMessage());
          }
        
        System.out.println("Sale testDeliveryManager."); 
    }

    /**Container's getter for XxqpPdftMypEstadosVO1
     */
    public XxqpPdftMypEstadosVOImpl getXxqpPdftMypEstadosVO1() {
        return (XxqpPdftMypEstadosVOImpl)findViewObject("XxqpPdftMypEstadosVO1");
    }

    /**Container's getter for XxqpPdftMypConceptosVO1
     */
    public XxqpPdftMypConceptosVOImpl getXxqpPdftMypConceptosVO1() {
        return (XxqpPdftMypConceptosVOImpl)findViewObject("XxqpPdftMypConceptosVO1");
    }

    /**Container's getter for ReglasDeNegocioTmpVO1
     */
    public ReglasDeNegocioTmpVOImpl getReglasDeNegocioTmpVO1() {
        return (ReglasDeNegocioTmpVOImpl)findViewObject("ReglasDeNegocioTmpVO1");
    }

    /**Container's getter for XxqpPdftMypRegNegVO1
     */
    public XxqpPdftMypRegNegVOImpl getXxqpPdftMypRegNegVO1() {
        return (XxqpPdftMypRegNegVOImpl)findViewObject("XxqpPdftMypRegNegVO1");
    }

    public void createRowRegNeg() {
        ReglasDeNegocioTmpVOImpl reglasDeNegocioTmpVOImpl =getReglasDeNegocioTmpVO1(); 
        if(!reglasDeNegocioTmpVOImpl.isPreparedForExecution()){
            reglasDeNegocioTmpVOImpl.executeQuery();
          }
          reglasDeNegocioTmpVOImpl.setMaxFetchSize(0);
          reglasDeNegocioTmpVOImpl.last();   // Go to the last Row of the VO
          System.out.println(reglasDeNegocioTmpVOImpl.getCurrentRow());
          oracle.jbo.domain.Number IdNum = null; 
          if(null==reglasDeNegocioTmpVOImpl.getCurrentRow()){
              IdNum = new  oracle.jbo.domain.Number(0);
          }else{
             String idNumTmp = reglasDeNegocioTmpVOImpl.getCurrentRow().getAttribute("Id").toString(); 
              IdNum = new oracle.jbo.domain.Number(Integer.parseInt(idNumTmp)+1);
          }
           reglasDeNegocioTmpVOImpl.next();
           ReglasDeNegocioTmpVORowImpl reglasDeNegocioTmpRowVOImpl = (ReglasDeNegocioTmpVORowImpl)reglasDeNegocioTmpVOImpl.createRow(); 
           reglasDeNegocioTmpRowVOImpl.setId(IdNum);
           reglasDeNegocioTmpVOImpl.insertRow(reglasDeNegocioTmpRowVOImpl);
    }

    public void deleteRowRegNeg(String strDeleteRegNegId) {
        ReglasDeNegocioTmpVOImpl reglasDeNegocioTmpVOImpl =getReglasDeNegocioTmpVO1(); 
        Row[] row = reglasDeNegocioTmpVOImpl.getFilteredRows("Id",strDeleteRegNegId);
        System.out.println("Total Rows: "+reglasDeNegocioTmpVOImpl.getRowCount());
        System.out.println("Selected Rows: "+row.length);
       for (int i=0;i<row.length;i++){
            ReglasDeNegocioTmpVORowImpl reglasDeNegocioTmpVORowImpl = null; 
            reglasDeNegocioTmpVORowImpl = (ReglasDeNegocioTmpVORowImpl)row[i];
            reglasDeNegocioTmpVORowImpl.remove();
        }
    }

    public void fillReglasDeNegocio(StringBuilder strMasiYPlatHeaderId) {
        oracle.jbo.domain.Number numMasiYPlatHeaderId=null;
        try {
           if(null!=strMasiYPlatHeaderId){
            numMasiYPlatHeaderId = new oracle.jbo.domain.Number(strMasiYPlatHeaderId.toString());
           }
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo fillReglasDeNegocio parametro strMasiYPlatHeaderId:"+strMasiYPlatHeaderId,OAException.ERROR); 
        }
        
        OADBTransaction oADBTransaction =this.getOADBTransaction();     
        XxqpPdftMypRegNegVOImpl xxqpPdftMypRegNegVOImpl = getXxqpPdftMypRegNegVO1(); 
        ReglasDeNegocioTmpVOImpl reglasDeNegocioTmpVOImpl = getReglasDeNegocioTmpVO1();
        
        RowSetIterator rowSetIterator = reglasDeNegocioTmpVOImpl.createRowSetIterator(null);
        while(rowSetIterator.hasNext()){
            ReglasDeNegocioTmpVORowImpl reglasDeNegocioTmpVORowImpl = null; 
            reglasDeNegocioTmpVORowImpl = (ReglasDeNegocioTmpVORowImpl)rowSetIterator.next(); 
           
                if((null!=reglasDeNegocioTmpVORowImpl.getEstadoCode()&&!"".equals(reglasDeNegocioTmpVORowImpl.getEstadoCode()))
                   &&(null!=reglasDeNegocioTmpVORowImpl.getConceptoCode()&&!"".equals(reglasDeNegocioTmpVORowImpl.getConceptoCode()))
                   ){
                   
                       if(null!=xxqpPdftMypRegNegVOImpl){    
                       if(!xxqpPdftMypRegNegVOImpl.isPreparedForExecution()){
                          xxqpPdftMypRegNegVOImpl.executeQuery();
                       }
                       XxqpPdftMypRegNegVORowImpl xxqpPdftMypRegNegVORowImpl = null; 
                       xxqpPdftMypRegNegVORowImpl = (XxqpPdftMypRegNegVORowImpl)xxqpPdftMypRegNegVOImpl.createRow();
                       oracle.jbo.domain.Number regNegID = oADBTransaction.getSequenceValue("XXQP_PDFT_MYP_REG_NEG_S");
                       xxqpPdftMypRegNegVORowImpl.setId(regNegID); 
                       xxqpPdftMypRegNegVORowImpl.setMypHeaderId(numMasiYPlatHeaderId);
                       xxqpPdftMypRegNegVORowImpl.setEstadoCode(reglasDeNegocioTmpVORowImpl.getEstadoCode());
                       xxqpPdftMypRegNegVORowImpl.setConceptoCode(reglasDeNegocioTmpVORowImpl.getConceptoCode());
                       xxqpPdftMypRegNegVORowImpl.setPrecio(reglasDeNegocioTmpVORowImpl.getPrecio());
                       xxqpPdftMypRegNegVOImpl.insertRow(xxqpPdftMypRegNegVORowImpl);
                       oADBTransaction.commit();
                       }
                   
                   }
        }
        rowSetIterator.closeRowSetIterator();
        
    }

    public void initReglasDeNegocioVO(String pStrMyPHeaderId) {
        oracle.jbo.domain.Number numMyPHeaderId=null;
        try {
            numMyPHeaderId = new oracle.jbo.domain.Number(pStrMyPHeaderId);
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo initMypCoberturaVO parametro pStrClientesHeaderId",OAException.ERROR); 
        }
        XxqpPdftMypRegNegVOImpl xxqpPdftMypRegNegVOImpl = getXxqpPdftMypRegNegVO1();
        if(null!=xxqpPdftMypRegNegVOImpl){
            xxqpPdftMypRegNegVOImpl.initByMyPHeaderId(numMyPHeaderId);
        }
    }

    public void createRowRegNegUpd(oracle.jbo.domain.Number pMypHeaderId) {
        OADBTransaction oADBTransaction =this.getOADBTransaction();   
        XxqpPdftMypRegNegVOImpl xxqpPdftMypRegNegVOImpl = getXxqpPdftMypRegNegVO1();
        if(!xxqpPdftMypRegNegVOImpl.isPreparedForExecution()){
            xxqpPdftMypRegNegVOImpl.executeQuery();
          }
          xxqpPdftMypRegNegVOImpl.setMaxFetchSize(0);
          xxqpPdftMypRegNegVOImpl.last();   // Go to the last Row of the VO
          System.out.println(xxqpPdftMypRegNegVOImpl.getCurrentRow());
          oracle.jbo.domain.Number IdNum = null; 
          IdNum = oADBTransaction.getSequenceValue("XXQP_PDFT_MYP_REG_NEG_S");
          xxqpPdftMypRegNegVOImpl.next();
          XxqpPdftMypRegNegVORowImpl xxqpPdftMypRegNegVORowImpl = (XxqpPdftMypRegNegVORowImpl)xxqpPdftMypRegNegVOImpl.createRow(); 
          xxqpPdftMypRegNegVORowImpl.setId(IdNum);
          xxqpPdftMypRegNegVORowImpl.setMypHeaderId(pMypHeaderId);
          xxqpPdftMypRegNegVOImpl.insertRow(xxqpPdftMypRegNegVORowImpl);
          /** oADBTransaction.commit(); **/
    }

    public void deleteRowRegNegUpd(String strDeleteRegNegId) {
        OADBTransaction oADBTransaction =this.getOADBTransaction();   
        XxqpPdftMypRegNegVOImpl xxqpPdftMypRegNegVOImpl = getXxqpPdftMypRegNegVO1();
        Row[] row = xxqpPdftMypRegNegVOImpl.getFilteredRows("Id",strDeleteRegNegId);
        System.out.println("Total Rows: "+xxqpPdftMypRegNegVOImpl.getRowCount());
        System.out.println("Selected Rows: "+row.length);
        for (int i=0;i<row.length;i++){
            XxqpPdftMypRegNegVORowImpl xxqpPdftMypRegNegVORowImpl = null; 
            xxqpPdftMypRegNegVORowImpl = (XxqpPdftMypRegNegVORowImpl)row[i];
            xxqpPdftMypRegNegVORowImpl.remove();
        }
        /**oADBTransaction.commit();**/
    }

    /**Container's getter for MtlSystemItemsBLOV1
     */
    public MtlSystemItemsBLOVImpl getMtlSystemItemsBLOV1() {
        return (MtlSystemItemsBLOVImpl)findViewObject("MtlSystemItemsBLOV1");
    }

    public void initEstadosLov(String pStrSvPartyId
                             , String pStrSearchText) {
        XxqpPdftMypEstadosVOImpl xxqpPdftMypEstadosVOImpl = getXxqpPdftMypEstadosVO1(); 
        xxqpPdftMypEstadosVOImpl.setWhereClause(" attribute1='"+pStrSvPartyId+"'");
        xxqpPdftMypEstadosVOImpl.executeQuery();
        int count =0;
        while(xxqpPdftMypEstadosVOImpl.hasNext()){
            xxqpPdftMypEstadosVOImpl.next();
            count = count+1;
            if(10==count){
              break;
            }
        }
        
        
    }

    public void initConceptosLov(String pStrSvPartyId
                                ,String pStrSearchText) {
   
        XxqpPdftMypConceptosVOImpl xxqpPdftMypConceptosVOImpl = getXxqpPdftMypConceptosVO1(); 
        xxqpPdftMypConceptosVOImpl.setWhereClause(" attribute1='"+pStrSvPartyId+"'");
        xxqpPdftMypConceptosVOImpl.executeQuery();
        int count =0;
        while(xxqpPdftMypConceptosVOImpl.hasNext()){
            xxqpPdftMypConceptosVOImpl.next();
            count = count+1;
            if(10==count){
              break;
            }
        }
        
    }
    
    public String getCamposRequeridosByUnidadDeNegocio(String pStrUnidadDeNegocioValue) {
        String retval = "";
        OADBTransaction  oADBTransaction = this.getOADBTransaction();
        Connection connection =   oADBTransaction.getJdbcConnection();
        String strPrepStmt = " SELECT XxqpPdftMgrCatalogosEO.ATTRIBUTE3\r" + 
                             "   FROM XXQP_PDFT_MGR_CATALOGOS XxqpPdftMgrCatalogosEO\r" + 
                             " WHERE LOOKUP_TYPE = 'UNIDAD_DE_NEGOCIO'\r" + 
                             "    AND STATUS = 'Y'\r" + 
                             "    AND LOOKUP_CODE = '"+pStrUnidadDeNegocioValue+"'";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;
        try
        {
          prepStmt = connection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
          resultSet = prepStmt.executeQuery();
          int count = 0; 
          while(resultSet.next()){
            retval = resultSet.getString("ATTRIBUTE3");  
         }
          
        } catch (SQLException sqle)
        {
        throw new OAException("EXCEPTION metodo getCamposRequeridosByUnidadDeNegocio clase MasivoYPlatinumAMImpl:"+sqle.getErrorCode()+" , "+sqle.getMessage(),OAException.ERROR);
        }
        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);
        return retval; 
    }
    
    
    public String getPrefijoByUnidadDeNegocio(String pStrUnidadDeNegocioValue) {
        String retval = "";
        OADBTransaction  oADBTransaction = this.getOADBTransaction();
        Connection connection =   oADBTransaction.getJdbcConnection();
        String strPrepStmt = " SELECT XxqpPdftMgrCatalogosEO.ATTRIBUTE2\r" + 
                             "   FROM XXQP_PDFT_MGR_CATALOGOS XxqpPdftMgrCatalogosEO\r" + 
                             " WHERE LOOKUP_TYPE = 'UNIDAD_DE_NEGOCIO'\r" + 
                             "    AND STATUS = 'Y'\r" + 
                             "    AND LOOKUP_CODE = '"+pStrUnidadDeNegocioValue+"'";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;
        try
        {
          prepStmt = connection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
          resultSet = prepStmt.executeQuery();
          int count = 0; 
          while(resultSet.next()){
            retval = resultSet.getString("ATTRIBUTE2");  
         }
          
        } catch (SQLException sqle)
        {
        throw new OAException("EXCEPTION metodo getPrefijoByUnidadDeNegocio clase MasivoYPlatinumAMImpl:"+sqle.getErrorCode()+" , "+sqle.getMessage(),OAException.ERROR);
        }
        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);
        return retval; 
    }
    
    private static void addAttachment(Multipart pMultipart
                                     ,InputStream pInputStream
                                     ,String pFilename
                                     ,String pContentType) throws IOException, 
                                                              MessagingException {
        
        DataSource source = new ByteArrayDataSource(pInputStream,pContentType);
        BodyPart messageBodyPart = new MimeBodyPart();        
        messageBodyPart.setDataHandler(new DataHandler(source));
        messageBodyPart.setFileName(pFilename);
        pMultipart.addBodyPart(messageBodyPart);
    }


    public void createRowRegNeg(String[] pAttributes) {
        ReglasDeNegocioTmpVOImpl reglasDeNegocioTmpVOImpl =getReglasDeNegocioTmpVO1(); 
        if(!reglasDeNegocioTmpVOImpl.isPreparedForExecution()){
            reglasDeNegocioTmpVOImpl.executeQuery();
          }
          reglasDeNegocioTmpVOImpl.setMaxFetchSize(0);
          reglasDeNegocioTmpVOImpl.last();   // Go to the last Row of the VO
          System.out.println(reglasDeNegocioTmpVOImpl.getCurrentRow());
          oracle.jbo.domain.Number IdNum = null; 
          if(null==reglasDeNegocioTmpVOImpl.getCurrentRow()){
              IdNum = new  oracle.jbo.domain.Number(0);
          }else{
             String idNumTmp = reglasDeNegocioTmpVOImpl.getCurrentRow().getAttribute("Id").toString(); 
              IdNum = new oracle.jbo.domain.Number(Integer.parseInt(idNumTmp)+1);
          }
           reglasDeNegocioTmpVOImpl.next();
           ReglasDeNegocioTmpVORowImpl reglasDeNegocioTmpRowVOImpl = (ReglasDeNegocioTmpVORowImpl)reglasDeNegocioTmpVOImpl.createRow(); 
           reglasDeNegocioTmpRowVOImpl.setId(IdNum);
           reglasDeNegocioTmpRowVOImpl.setEstadoMeaning(pAttributes[0]);
           reglasDeNegocioTmpRowVOImpl.setConceptoMeaning(pAttributes[1]);
           oracle.jbo.domain.Number nPrecio=null;
            try {
                nPrecio = new oracle.jbo.domain.Number(pAttributes[2]);
            } catch (SQLException e) {
                // TODO
            }
           reglasDeNegocioTmpRowVOImpl.setPrecio(nPrecio);
           reglasDeNegocioTmpVOImpl.insertRow(reglasDeNegocioTmpRowVOImpl);
    }
}
