package xxqp.oracle.apps.ar.pdft.altafitec.qplabs.server;

import java.io.IOException;

import java.io.InputStream;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.webui.OAPageContext;
import oracle.apps.fnd.framework.webui.beans.OAWebBean;
import oracle.apps.fnd.framework.webui.beans.form.OAFormValueBean;
import oracle.apps.fnd.framework.webui.beans.message.OAMessageChoiceBean;
import oracle.apps.fnd.framework.webui.beans.message.OAMessageTextInputBean;

import oracle.apps.xdo.delivery.DeliveryException;
import oracle.apps.xdo.delivery.DeliveryManager;
import oracle.apps.xdo.delivery.DeliveryPropertyDefinitions;
import oracle.apps.xdo.delivery.DeliveryRequest;
import oracle.apps.xdo.delivery.InvalidFactoryException;
import oracle.apps.xdo.delivery.UndefinedRequestTypeException;

import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.BlobDomain;

import oracle.jdbc.OracleCallableStatement;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class QpLabsAMImpl extends OAApplicationModuleImpl {

    public static String strXxqpPdftEmail;
    public static String strXxqpPdftEmailPwd;
    
    /**This is the default constructor (do not remove)
     */
    public QpLabsAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("xxqp.oracle.apps.ar.pdft.altafitec.qplabs.server", /* package name */
      "QpLabsAMLocal" /* Configuration Name */);
    }
    
    /**Container's getter for XxqpPdftQplabsHeaderVO1
     */
    public XxqpPdftQplabsHeaderVOImpl getXxqpPdftQplabsHeaderVO1() {
        return (XxqpPdftQplabsHeaderVOImpl)findViewObject("XxqpPdftQplabsHeaderVO1");
    }
    
    /**Container's getter for PreciosClientesTmpVO1
     */
    public PreciosClientesTmpVOImpl getPreciosClientesTmpVO1() {
        return (PreciosClientesTmpVOImpl)findViewObject("PreciosClientesTmpVO1");
    }

    /**Container's getter for XxqpPdftQplabsInfoOperVO1
     */
    public XxqpPdftQplabsInfoOperVOImpl getXxqpPdftQplabsInfoOperVO1() {
        return (XxqpPdftQplabsInfoOperVOImpl)findViewObject("XxqpPdftQplabsInfoOperVO1");
    }

    public void fillCamposHead(OAPageContext pageContext, OAWebBean webBean) {
        OAMessageTextInputBean FechaActualBean = (OAMessageTextInputBean)webBean.findChildRecursive("Fecha");                 
        OAMessageTextInputBean EjecutivoBean = (OAMessageTextInputBean)webBean.findChildRecursive("Ejecutivo");  
        OAMessageTextInputBean NombreDelClienteBean = (OAMessageTextInputBean)webBean.findChildRecursive("NombreDelCliente");  
        OAMessageChoiceBean EstatusBean = (OAMessageChoiceBean)webBean.findChildRecursive("Estatus"); 
        OAFormValueBean PartyIdBean = (OAFormValueBean)webBean.findChildRecursive("PartyId"); 
        if(null!=EstatusBean){
            EstatusBean.setValue(pageContext,"PRELIMINAR");
        }
        
        OADBTransaction  oADBTransaction = this.getOADBTransaction();

        Connection connection =   oADBTransaction.getJdbcConnection();
          String strPrepStmt = " select   p.party_id " +
                               "         ,to_char(sysdate,'DD-MON-YYYY HH24:MI:SS') fecha_actual\n" + 
                               "         ,(select  fu.user_name||' - '||fu.description \n" + 
                               "             from fnd_user fu\n" + 
                               "           where 1=1 \n" + 
                               "              and user_id = fnd_profile.value('USER_ID')\n" + 
                               "           ) ejecutivo\n" + 
                               "         ,p.known_as nombre_del_cliente\n" + 
                               "   from hz_parties p\n" + 
                               "  where p.party_id = ? ";

              String strPartyId = pageContext.getParameter("pPartyId");/*"6041";*/
              if(null==strPartyId){
               throw new OAException("No se encontro valor del parametro pPartyId.",OAException.ERROR); 
              }else{
                  PartyIdBean.setValue(pageContext,strPartyId);
              }
              Double douPartyId = new Double(strPartyId);
              PreparedStatement prepStmt = null;
              ResultSet resultSet = null;
              try
              {
                prepStmt = connection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
                prepStmt.setDouble(1,douPartyId);
                resultSet = prepStmt.executeQuery();
                while(resultSet.next()){
                  
                  if(null!=FechaActualBean){
                      FechaActualBean.setValue(pageContext,resultSet.getString("fecha_actual"));
                  }
                  if(null!=EjecutivoBean){
                      EjecutivoBean.setValue(pageContext,resultSet.getString("ejecutivo"));
                  }
                  if(null!=NombreDelClienteBean){
                      NombreDelClienteBean.setValue(pageContext,resultSet.getString("nombre_del_cliente"));
                  }
                  
                }
                
              } catch (SQLException sqle)
              {
               throw new OAException("EXCEPTION metodo fillCamposHead clase QpLabsAMImpl:"+sqle.getErrorCode()+" , "+sqle.getMessage(),OAException.ERROR);
              }
             closeResultSet(resultSet);
             closePreparedStatement(prepStmt);    
    }
    /**
       * Metodo que cierra un Result Set
       * @param pResultSet
       */
      private void closeResultSet(ResultSet pResultSet)
      {
        if(null!=pResultSet){
          try
          {
            pResultSet.close();
          } catch (SQLException sqle)
          {
           throw new OAException(sqle.getErrorCode()+ " , "+sqle.getMessage(),OAException.ERROR);
          }
        }
      }

      /**
       * Metodo que cierra un Prepared Statement
       * @param pPrepStmt
       */
      private void closePreparedStatement(PreparedStatement pPrepStmt)
      {
         if(null!=pPrepStmt){
          try
          {
            pPrepStmt.close();
          } catch (SQLException sqle)
          {
             throw new OAException(sqle.getErrorCode()+ " , "+sqle.getMessage(),OAException.ERROR);
          }
        }
      }

    
    public void fillHeader(StringBuilder pStrQpLabsHeaderId,
                           String pStrContrato, 
                           String pStrContratoExamineFileName, 
                           String pStrContratoExamineContentType, 
                           BlobDomain ContratoExamineByteStream, 
                           String pStrEstatusValue, 
                           String pStrUnidadDeNegocioValue, 
                           String pStrEmpresaQueFacturaValue, 
                           String pStrCicloFacturacionValue, 
                           String pStrFechaInicioOperacionValue, 
                           String pStrPartyID) {
        XxqpPdftQplabsHeaderVOImpl xxqpPdftQplabsHeaderVOImpl= getXxqpPdftQplabsHeaderVO1(); 
        XxqpPdftQplabsHeaderVORowImpl xxqpPdftQplabsHeaderVORowImpl = null; 
        OADBTransaction oADBTransaction = this.getOADBTransaction();
        
        oracle.jbo.domain.Number numQpLabsHeaderId = oADBTransaction.getSequenceValue("XXQP_PDFT_QPLABS_HEADER_S");
        oracle.jbo.domain.Number numNumeroFt = oADBTransaction.getSequenceValue("XXQP_PDFT_NUMERO_FT_S");
        oracle.jbo.domain.Number numPartyId=null;

           try {
               numPartyId = new oracle.jbo.domain.Number(pStrPartyID);
           } catch (SQLException sqle) {
              throw new OAException("Excepcion metodo fillHeader attributo numPartyId.",OAException.ERROR);
           }
         
        if(null!=xxqpPdftQplabsHeaderVOImpl){
         if(!xxqpPdftQplabsHeaderVOImpl.isPreparedForExecution()){
             xxqpPdftQplabsHeaderVOImpl.executeQuery();
         }
            xxqpPdftQplabsHeaderVORowImpl = (XxqpPdftQplabsHeaderVORowImpl)xxqpPdftQplabsHeaderVOImpl.createRow();
            xxqpPdftQplabsHeaderVORowImpl.setId(numQpLabsHeaderId);
            xxqpPdftQplabsHeaderVORowImpl.setNumeroFt(numNumeroFt);
            xxqpPdftQplabsHeaderVORowImpl.setContratoFlag(pStrContrato);
            xxqpPdftQplabsHeaderVORowImpl.setContratoFileName(pStrContratoExamineFileName);
            xxqpPdftQplabsHeaderVORowImpl.setContratoContentType(pStrContratoExamineContentType);
            xxqpPdftQplabsHeaderVORowImpl.setContratoFile(ContratoExamineByteStream);
            xxqpPdftQplabsHeaderVORowImpl.setStatus(pStrEstatusValue);
            xxqpPdftQplabsHeaderVORowImpl.setUnidadDeNegocioC(pStrUnidadDeNegocioValue);
            xxqpPdftQplabsHeaderVORowImpl.setEmpresaQueFacturaC(pStrEmpresaQueFacturaValue);
            xxqpPdftQplabsHeaderVORowImpl.setFrecuenciaFacturacionC(pStrCicloFacturacionValue);
             if(null!=pStrFechaInicioOperacionValue){
              xxqpPdftQplabsHeaderVORowImpl.setFechaInicialOperacion(new oracle.jbo.domain.Date(pStrFechaInicioOperacionValue));
              }
            xxqpPdftQplabsHeaderVORowImpl.setPartyId(numPartyId);
         
            xxqpPdftQplabsHeaderVOImpl.insertRow(xxqpPdftQplabsHeaderVORowImpl);
            
          oADBTransaction.commit();
          
          pStrQpLabsHeaderId.append(numQpLabsHeaderId.toString());
            
        } /** END if(null!=xxqpPdftBpoHeaderVOImpl){ **/
        
    }

    public XxqpPdftQplabsHeaderVORowImpl initQplabsHeaderVO(String pStrQplabsHeaderId) {
        XxqpPdftQplabsHeaderVORowImpl retval = null;  
        oracle.jbo.domain.Number numQplabsHeaderId=null;
        try {
            numQplabsHeaderId = new oracle.jbo.domain.Number(pStrQplabsHeaderId);
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo initBpoHeaderVO parametro pStrQplabsHeaderId",OAException.ERROR); 
        }
        
        XxqpPdftQplabsHeaderVOImpl xxqpPdftQplabsHeaderVOImpl = getXxqpPdftQplabsHeaderVO1(); 
        XxqpPdftQplabsHeaderVORowImpl xxqpPdftQplabsHeaderVORowImpl = null; 
        if(null!=xxqpPdftQplabsHeaderVOImpl){
         if(!xxqpPdftQplabsHeaderVOImpl.isPreparedForExecution()){
             xxqpPdftQplabsHeaderVOImpl.initByQplabsHeaderId(numQplabsHeaderId);
         }
         
          RowSetIterator QplabsHeaderIterator =  xxqpPdftQplabsHeaderVOImpl.createRowSetIterator(null); 
          while(QplabsHeaderIterator.hasNext()){
              xxqpPdftQplabsHeaderVORowImpl = (XxqpPdftQplabsHeaderVORowImpl)QplabsHeaderIterator.next(); 
              retval = xxqpPdftQplabsHeaderVORowImpl; 
              break;
          }
          QplabsHeaderIterator.closeRowSetIterator();
         
        }
        
        return retval; 
        
    }

   
    
    public void agregarPreciosClientesFila() {
        PreciosClientesTmpVOImpl preciosClientesTmpVOImpl = getPreciosClientesTmpVO1(); 
        PreciosClientesTmpVORowImpl preciosClientesTmpVORowImpl = null; 
        if(null!=preciosClientesTmpVOImpl){
         if(!preciosClientesTmpVOImpl.isPreparedForExecution()){
             preciosClientesTmpVOImpl.executeQuery();
         }
           int count = preciosClientesTmpVOImpl.getFetchedRowCount();
           oracle.jbo.domain.Number numLineID = new oracle.jbo.domain.Number(count+1);
            preciosClientesTmpVORowImpl = (PreciosClientesTmpVORowImpl)preciosClientesTmpVOImpl.createRow();
            preciosClientesTmpVORowImpl.setLineId(numLineID);
            preciosClientesTmpVOImpl.insertRow(preciosClientesTmpVORowImpl);
        }
    } /** END public void agregarPreciosClientesFila() { **/

    

    public void fillInformacionOperativa(StringBuilder pStrQpLabsHeaderId, 
                                         String pStrTipoDeServicioValue, 
                                         String pStrNombreDeServicioValue, 
                                         String pStrVolumenAproximadoValue, 
                                         String pStrComentariosAdicionalesValue) {
        oracle.jbo.domain.Number numQplabsHeaderId=null;
        try {
            numQplabsHeaderId = new oracle.jbo.domain.Number(pStrQpLabsHeaderId.toString());
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo fillInformacionOperativa parametro pStrQplabsHeaderId",OAException.ERROR); 
        }
        
        XxqpPdftQplabsInfoOperVOImpl xxqpPdftQplabsInfoOperVOImpl = getXxqpPdftQplabsInfoOperVO1();
        XxqpPdftQplabsInfoOperVORowImpl xxqpPdftQplabsInfoOperVORowImpl= null; 
        OADBTransaction  oADBTransaction = this.getOADBTransaction();
        if(null!=xxqpPdftQplabsInfoOperVOImpl){
          if(!xxqpPdftQplabsInfoOperVOImpl.isPreparedForExecution()){
              xxqpPdftQplabsInfoOperVOImpl.executeQuery();
          }
           xxqpPdftQplabsInfoOperVORowImpl = (XxqpPdftQplabsInfoOperVORowImpl)xxqpPdftQplabsInfoOperVOImpl.createRow();
           oracle.jbo.domain.Number numQlabsInformacionOeracionalId = oADBTransaction.getSequenceValue("XXQP_PDFT_QPLABS_INFO_OPER_S");
            xxqpPdftQplabsInfoOperVORowImpl.setId(numQlabsInformacionOeracionalId);
            xxqpPdftQplabsInfoOperVORowImpl.setQplabsHeaderId(numQplabsHeaderId);
            xxqpPdftQplabsInfoOperVORowImpl.setTipoServico(pStrTipoDeServicioValue);
            xxqpPdftQplabsInfoOperVORowImpl.setNombreServicio(pStrNombreDeServicioValue);
            xxqpPdftQplabsInfoOperVORowImpl.setVolumenAproximado(pStrVolumenAproximadoValue);
            xxqpPdftQplabsInfoOperVORowImpl.setComentariosAdicionales(pStrComentariosAdicionalesValue);
           xxqpPdftQplabsInfoOperVOImpl.insertRow(xxqpPdftQplabsInfoOperVORowImpl);
            oADBTransaction.commit();
        } /** END  if(null!=xxqpPdftQplabsInfoOperVOImpl){ **/
    }

    public XxqpPdftQplabsInfoOperVORowImpl initQplabsInfoOperVO(String pStrQplabsHeaderId) {
        XxqpPdftQplabsInfoOperVORowImpl  retval = null; 
        oracle.jbo.domain.Number numQplabsHeaderId=null;
        try {
            numQplabsHeaderId = new oracle.jbo.domain.Number(pStrQplabsHeaderId);
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo initQplabsInfoOperVO parametro pStrQplabsHeaderId",OAException.ERROR); 
        }
        XxqpPdftQplabsInfoOperVOImpl  xxqpPdftQplabsInfoOperVOImpl = getXxqpPdftQplabsInfoOperVO1(); 
        if(null!=xxqpPdftQplabsInfoOperVOImpl){
          if(!xxqpPdftQplabsInfoOperVOImpl.isPreparedForExecution()){
              xxqpPdftQplabsInfoOperVOImpl.initByQplabsHeaderId(numQplabsHeaderId);
          }
          
          RowSetIterator QplabsInfoOperIteartor =  xxqpPdftQplabsInfoOperVOImpl.createRowSetIterator(null);
          while(QplabsInfoOperIteartor.hasNext()){
              retval = (XxqpPdftQplabsInfoOperVORowImpl)QplabsInfoOperIteartor.next();
              break;
          }
          QplabsInfoOperIteartor.closeRowSetIterator();
            
        }
        return retval;
    }

    /**Container's getter for XxqpPdftQplabsPrecClieVO1
     */
    public XxqpPdftQplabsPrecClieVOImpl getXxqpPdftQplabsPrecClieVO1() {
        return (XxqpPdftQplabsPrecClieVOImpl)findViewObject("XxqpPdftQplabsPrecClieVO1");
    }

    public void fillPreciosClientes(StringBuilder pStrQpLabsHeaderId) {
        oracle.jbo.domain.Number numQplabsHeaderId=null;
        try {
            numQplabsHeaderId = new oracle.jbo.domain.Number(pStrQpLabsHeaderId.toString());
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo fillPreciosClientes parametro pStrQplabsHeaderId",OAException.ERROR); 
        }
        XxqpPdftQplabsPrecClieVOImpl xxqpPdftQplabsPrecClieVOImpl = getXxqpPdftQplabsPrecClieVO1(); 
        XxqpPdftQplabsPrecClieVORowImpl xxqpPdftQplabsPrecClieVORowImpl = null; 
        PreciosClientesTmpVOImpl preciosClientesTmpVOImpl = getPreciosClientesTmpVO1(); 
        PreciosClientesTmpVORowImpl preciosClientesTmpVORowImpl = null; 
        
        OADBTransaction oADBTransaction = this.getOADBTransaction(); 
        
       RowSetIterator iterPreciosClientes = preciosClientesTmpVOImpl.createRowSetIterator(null);
       while(iterPreciosClientes.hasNext()){
           preciosClientesTmpVORowImpl = (PreciosClientesTmpVORowImpl)iterPreciosClientes.next();
           if(null!=xxqpPdftQplabsPrecClieVOImpl){
            if(!xxqpPdftQplabsPrecClieVOImpl.isPreparedForExecution()){
                xxqpPdftQplabsPrecClieVOImpl.executeQuery();
            }
               xxqpPdftQplabsPrecClieVORowImpl = (XxqpPdftQplabsPrecClieVORowImpl)xxqpPdftQplabsPrecClieVOImpl.createRow();
               oracle.jbo.domain.Number numQplabsPreciosClientesID = oADBTransaction.getSequenceValue("XXQP_PDFT_QPLABS_PREC_CLIE_S");
               xxqpPdftQplabsPrecClieVORowImpl.setId(numQplabsPreciosClientesID);
               xxqpPdftQplabsPrecClieVORowImpl.setQplabsHeaderId(numQplabsHeaderId);
               xxqpPdftQplabsPrecClieVORowImpl.setConcepto(preciosClientesTmpVORowImpl.getConcepto());
               xxqpPdftQplabsPrecClieVORowImpl.setPrecio(preciosClientesTmpVORowImpl.getPrecio());
               xxqpPdftQplabsPrecClieVOImpl.insertRow(xxqpPdftQplabsPrecClieVORowImpl);
               oADBTransaction.commit();
           } /** END  if(null!=xxqpPdftQplabsPrecClieVOImpl){ **/
       } /** END while(iterPreciosClientes.hasNext()){ **/
        
    }

    public void initQplabsPrecClieVO(String pStrQplabsHeaderId) {
        oracle.jbo.domain.Number numQplabsHeaderId=null;
        try {
            numQplabsHeaderId = new oracle.jbo.domain.Number(pStrQplabsHeaderId);
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo initQplabsPrecClieVO parametro pStrQplabsHeaderId",OAException.ERROR); 
        }
        
     XxqpPdftQplabsPrecClieVOImpl xxqpPdftQplabsPrecClieVOImpl = getXxqpPdftQplabsPrecClieVO1(); 
     if(null!=xxqpPdftQplabsPrecClieVOImpl){
      if(!xxqpPdftQplabsPrecClieVOImpl.isPreparedForExecution()){
          xxqpPdftQplabsPrecClieVOImpl.initByQplabsHeaderId(numQplabsHeaderId);
      }
     }
        
    }

    /**Container's getter for QplabsHeaderTmpVO1
     */
    public QplabsHeaderTmpVOImpl getQplabsHeaderTmpVO1() {
        return (QplabsHeaderTmpVOImpl)findViewObject("QplabsHeaderTmpVO1");
    }

    public void initQplabsHeaderTmpVO() {
        QplabsHeaderTmpVOImpl qplabsHeaderTmpVOImpl = getQplabsHeaderTmpVO1(); 
        QplabsHeaderTmpVORowImpl qplabsHeaderTmpVORowImpl = null; 
        if(null!=qplabsHeaderTmpVOImpl){
         if(1==qplabsHeaderTmpVOImpl.getFetchedRowCount()){
          return; 
         }
         if(!qplabsHeaderTmpVOImpl.isPreparedForExecution()){
             qplabsHeaderTmpVOImpl.executeQuery();
         }
            qplabsHeaderTmpVORowImpl = (QplabsHeaderTmpVORowImpl)qplabsHeaderTmpVOImpl.createRow();
            qplabsHeaderTmpVOImpl.insertRow(qplabsHeaderTmpVORowImpl);
        }
        
    }

    public String executeQplabsGetInfo() {
        String retval = null; 
        String strCallableStmt = " BEGIN \n" + 
                                 "  APPS.XXQP_PDFT_QPLABS_PKG.GET_INFO ( PSO_ERRMSG            => :1\n" + 
                                 "                                     , PSO_ERRCOD            => :2\n" + 
                                 "                                     , PCO_INFO              => :3\n" + 
                                 "                                     , PNI_QPLABS_HEADER_ID  => :4 "+
                                 "                                     );\n" + 
                                 " END; \n";
        OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
        OracleCallableStatement oraclecallablestatement =  (OracleCallableStatement)oadbtransaction.createCallableStatement(strCallableStmt, 1);
        oracle.jbo.domain.Number numQpLabsHeaderId = (oracle.jbo.domain.Number)this.getXxqpPdftQplabsHeaderVO1().getCurrentRow().getAttribute("Id");
        System.out.println("numQpLabsHeaderId:"+numQpLabsHeaderId);
        try {
            oraclecallablestatement.registerOutParameter(1,Types.VARCHAR);
            oraclecallablestatement.registerOutParameter(2,Types.VARCHAR);
            oraclecallablestatement.registerOutParameter(3,Types.CLOB);
            oraclecallablestatement.setDouble(4,numQpLabsHeaderId.doubleValue());
            oraclecallablestatement.execute();
            java.sql.Clob retvalClob = oraclecallablestatement.getClob(3);
            java.io.Reader reader =retvalClob.getCharacterStream();
            java.io.BufferedReader bufferReader = new java.io.BufferedReader(reader);
            String retvalxml = "";
            String line = null; 
            while((line = bufferReader.readLine())!=null){
                retvalxml = retvalxml+line;
            }
            System.out.println("retvalxml:"+retvalxml);
            retval = retvalxml;
            bufferReader.close();
            reader.close();
                        
        } catch (SQLException e) {
            System.out.println("SQLException en el metodo executeQplabsGetInfo:"+e.getErrorCode());
            throw new OAException("SQLException en el metodo executeQplabsGetInfo:"+e.getErrorCode(),OAException.ERROR); 
        }catch (IOException ioe) {
            System.out.println("IOException en el metodo executeQplabsGetInfo"+ioe.getMessage());
            throw new OAException("IOException en el metodo executeQplabsGetInfo:"+ioe.getMessage(),OAException.ERROR);
        }
        
        return retval;
    }
    
    public String enviaCorreos(InputStream pInputStream) {
        System.out.println("Entra enviaCorreos");
        String retval = null;
        OADBTransaction  oADBTransaction = this.getOADBTransaction();

        Connection connection =   oADBTransaction.getJdbcConnection();
          String strPrepStmt = " SELECT ID                     \n" + 
                               "        ,RESPONSABILIDAD   \n" + 
                               "        ,USUARIO               \n" + 
                               "        ,AREA                  \n" + 
                               "        ,CORREO               \n" + 
                               "        ,IS_ENABLED               \n" + 
                               "        ,CREATED_BY               \n" + 
                               "        ,CREATION_DATE          \n" + 
                               "        ,LAST_UPDATED_BY        \n" + 
                               "        ,LAST_UPDATE_DATE      \n" + 
                               "        ,LAST_UPDATE_LOGIN     \n" + 
                               "        ,ATTRIBUTE_CATEGORY    \n" + 
                               "        ,ATTRIBUTE1            \n" + 
                               "        ,ATTRIBUTE2            \n" + 
                               "        ,ATTRIBUTE3            \n" + 
                               "        ,ATTRIBUTE4            \n" + 
                               "        ,ATTRIBUTE5            \n" + 
                               " FROM  XXQP_PDFT_DISTRIBUCION\n" + 
                               " WHERE IS_ENABLED = 'Y' ";

           
              PreparedStatement prepStmt = null;
              ResultSet resultSet = null;
              try
              {
                prepStmt = connection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
                resultSet = prepStmt.executeQuery();
                int count = 0; 
                while(resultSet.next()){
                    String strCorreo = null; 
                    strCorreo = resultSet.getString("CORREO");  
                    if(count>0){
                        retval = retval+","+strCorreo;
                    }else if(count==0){
                        retval = strCorreo; 
                    }
                   count = count +1; 
               }
                
             } catch (SQLException sqle)
             {
              throw new OAException("EXCEPTION metodo enviaCorreos clase BpoAMImpl:"+sqle.getErrorCode()+" , "+sqle.getMessage(),OAException.ERROR);
             }
            closeResultSet(resultSet);
            closePreparedStatement(prepStmt);
         
       
        java.util.Map<String,String> map = new java.util.HashMap<String,String>();
        map.put("Responsablidad",""); 
        map.put("Usuario",""); 
        map.put("Area",""); 
        map.put("Correo",retval); 
       
        testDeliveryManager(pInputStream,map);
        
         return retval; 
         
    }
    
    private void testDeliveryManager(InputStream inputStream, 
                                     Map<String, String> map) {
        System.out.println("Entra testDeliveryManager.");
        DeliveryManager deliveryManager = null;
        DeliveryRequest deliveryRequest = null; 
        String strCorreo = map.get("Correo");
        try {
            deliveryManager = new DeliveryManager();
            
            strXxqpPdftEmail = this.getOADBTransaction().getProfile("XXQP_PDFT_EMAIL"); 
            strXxqpPdftEmailPwd = this.getOADBTransaction().getProfile("XXQP_PDFT_EMAIL_PWD");
            
            deliveryRequest = deliveryManager.createRequest(DeliveryManager.TYPE_SMTP_EMAIL);
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_SUBJECT,"Test Delivery Manager");
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_HOST,"mail.qualitypost.com.mx");
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_PORT,"1825");
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_FROM,QpLabsAMImpl.strXxqpPdftEmail);
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_USERNAME,QpLabsAMImpl.strXxqpPdftEmail);
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_PASSWORD,QpLabsAMImpl.strXxqpPdftEmailPwd);
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_TO_RECIPIENTS,strCorreo);
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_CONTENT_FILENAME,"AltaFichaTecnicaQplabs.pdf");
            deliveryRequest.addProperty(DeliveryPropertyDefinitions.SMTP_CONTENT_TYPE,"application/pdf");
            deliveryRequest.setDocument(inputStream);
            deliveryRequest.submit(); 
            deliveryRequest.close();
        } catch (InvalidFactoryException e) {
           System.out.println("InvalidFactoryException:"+e.getMessage());
        } catch (UndefinedRequestTypeException e) {
            System.out.println("UndefinedRequestTypeException:"+e.getMessage());
        } catch (DeliveryException e) {
             System.out.println("DeliveryException:"+e.getMessage()+", "+e.getCause());
        }        
        System.out.println("Sale testDeliveryManager."); 
    }
    
    
}
