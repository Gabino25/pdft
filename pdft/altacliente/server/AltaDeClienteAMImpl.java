package xxqp.oracle.apps.ar.pdft.altacliente.server;

import com.sun.java.util.collections.List;

import java.io.IOException;

import java.io.InputStream;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;

import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;

import javax.mail.internet.MimeMultipart;
import javax.mail.util.ByteArrayDataSource;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.jbo.RowSetIterator;

import oracle.jbo.domain.Number;

import oracle.jdbc.OracleCallableStatement;

import xxqp.oracle.apps.ar.pdft.altafitec.bpo.server.BpoAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AltaDeClienteAMImpl extends OAApplicationModuleImpl {

  public static String strXxqpPdftEmail;
  public static String strXxqpPdftEmailPwd;
    
  /**This is the default constructor (do not remove)
   */
  public AltaDeClienteAMImpl()
  {
  }

  /**Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("xxqp.oracle.apps.ar.pdft.altacliente.server", /* package name */
      "AltaDeClienteAMLocal" /* Configuration Name */);
  }

  /**Container's getter for ContactosTmpVO1
   */
  public ContactosTmpVOImpl getContactosTmpVO1()
  {
    return (ContactosTmpVOImpl)findViewObject("ContactosTmpVO1");
  }
  
  /**Container's getter for XxqpPdftClientesHeaderVO1
   */
  public XxqpPdftClientesHeaderVOImpl getXxqpPdftClientesHeaderVO1()
  {
    return (XxqpPdftClientesHeaderVOImpl)findViewObject("XxqpPdftClientesHeaderVO1");
  }

    /**Container's getter for XxqpPdftClientesDirFiscalVO1
     */
    public XxqpPdftClientesDirFiscalVOImpl getXxqpPdftClientesDirFiscalVO1() {
        return (XxqpPdftClientesDirFiscalVOImpl)findViewObject("XxqpPdftClientesDirFiscalVO1");
    }
    
    /**Container's getter for XxqpPdftClientesPuntoRecoVO1
     */
    public XxqpPdftClientesPuntoRecoVOImpl getXxqpPdftClientesPuntoRecoVO1() {
        return (XxqpPdftClientesPuntoRecoVOImpl)findViewObject("XxqpPdftClientesPuntoRecoVO1");
    }
    
    /**Container's getter for XxqpPdftClientesContactosVO1
     */
    public XxqpPdftClientesContactosVOImpl getXxqpPdftClientesContactosVO1() {
        return (XxqpPdftClientesContactosVOImpl)findViewObject("XxqpPdftClientesContactosVO1");
    }
    
    /**Container's getter for XxqpPdftClientesFactPagVO1
     */
    public XxqpPdftClientesFactPagVOImpl getXxqpPdftClientesFactPagVO1() {
        return (XxqpPdftClientesFactPagVOImpl)findViewObject("XxqpPdftClientesFactPagVO1");
    }
    
    
  public void initContactosTmpVO()
  {
    ContactosTmpVOImpl contactosTmpVOImpl = getContactosTmpVO1();
    ContactosTmpVORowImpl contactosTmpVORowImpl = null; 
    if(null!=contactosTmpVOImpl){
      if(!contactosTmpVOImpl.isPreparedForExecution()){
      contactosTmpVOImpl.executeQuery();
      }
       RowSetIterator iterator = contactosTmpVOImpl.createRowSetIterator(null);
       while(iterator.hasNext()){
          contactosTmpVORowImpl = (ContactosTmpVORowImpl)iterator.next();
          String strTipoDeContacto = contactosTmpVORowImpl.getTipoDeContacto();
          if(("Cierre y Seguimiento".equals(strTipoDeContacto))
            ||("Cobranza".equals(strTipoDeContacto))
            ||("Gerencial".equals(strTipoDeContacto))
            ){
             /** contactosTmpVORowImpl.setIsRequired("yes");  Solicitado 21032018**/
          }
       } /** END  while(iterator.hasNext()){ **/
        iterator.closeRowSetIterator();
    }
  }

  public void displayInfoContactosTmpVO()
  {
    ContactosTmpVOImpl contactosTmpVOImpl = getContactosTmpVO1();
    ContactosTmpVORowImpl contactosTmpVORowImpl = null; 
    if(null!=contactosTmpVOImpl){
     if(contactosTmpVOImpl.isPreparedForExecution()){
      RowSetIterator iterator = contactosTmpVOImpl.createRowSetIterator(null);
      while(iterator.hasNext()){
        contactosTmpVORowImpl = (ContactosTmpVORowImpl)iterator.next();
        System.out.println("Nombre:"+contactosTmpVORowImpl.getNombre());
      } /** END while(iterator.hasNext()){ **/
       iterator.closeRowSetIterator();
     } 
    }
  }


    public void fillClientesHeader(StringBuilder pSbHeaderId, 
                                   String pStrNombreCLiente, 
                                   String pStrGiroEmpresarialValue, 
                                   String pStrGiroEmpresarialText, 
                                   String pStrEmpresaQueFacturaValue, 
                                   String pStrEmpresaQueFacturaText, 
                                   String pStrComentarios, 
                                   String pStrTipoOperativoValue, 
                                   String pStrTipoOperativoText, 
                                   String pStrTipoAdministrativoValue, 
                                   String pStrTipoAdministrativoText, 
                                   String pStrTipoComercialValue, 
                                   String pStrTipoComercialText,
                                   String pStrRFC,
                                   String pRazonSocial
                                   ) {
        XxqpPdftClientesHeaderVOImpl xxqpPdftClientesHeaderVOImpl =getXxqpPdftClientesHeaderVO1();
        XxqpPdftClientesHeaderVORowImpl xxqpPdftClientesHeaderVORowImpl =null; 
        
        OADBTransaction oADBTransaction = this.getOADBTransaction();
        
        if(null!=xxqpPdftClientesHeaderVOImpl){
          if(!xxqpPdftClientesHeaderVOImpl.isPreparedForExecution()){
              xxqpPdftClientesHeaderVOImpl.executeQuery();
          }
          
            xxqpPdftClientesHeaderVORowImpl = (XxqpPdftClientesHeaderVORowImpl)xxqpPdftClientesHeaderVOImpl.createRow();
            
            oracle.jbo.domain.Number numHeader_id = oADBTransaction.getSequenceValue("XXQP_PDFT_CLIENTES_HEADER_S");
            xxqpPdftClientesHeaderVORowImpl.setId(numHeader_id);
            pSbHeaderId.append(numHeader_id);
            xxqpPdftClientesHeaderVORowImpl.setNombreCliente(pStrNombreCLiente);
            xxqpPdftClientesHeaderVORowImpl.setGiroEmpresarialC(pStrGiroEmpresarialValue);                                 
            xxqpPdftClientesHeaderVORowImpl.setEmpresaQueFacturaC(pStrEmpresaQueFacturaValue);
            xxqpPdftClientesHeaderVORowImpl.setComentarios(pStrComentarios);
            xxqpPdftClientesHeaderVORowImpl.setRfc(pStrRFC);
            xxqpPdftClientesHeaderVORowImpl.setTipoOperativoC(pStrTipoOperativoValue);
            xxqpPdftClientesHeaderVORowImpl.setTipoAdministrativoC(pStrTipoAdministrativoValue);     
            xxqpPdftClientesHeaderVORowImpl.setTipoComercialC(pStrTipoComercialValue);       
            xxqpPdftClientesHeaderVORowImpl.setRazonSocial(pRazonSocial);
            
            xxqpPdftClientesHeaderVOImpl.insertRow(xxqpPdftClientesHeaderVORowImpl);
          
        }
        
        this.getOADBTransaction().commit();
        
    }

    public void fillDireccionFiscal(String pStrHeaderId,
                                    String pStrRFCP, 
                                    String pStrRazonSocialP, 
                                    String pStrDireccionP, 
                                    String pStrNumeroExtP,
                                    String pStrNumeroIntP,
                                    String pStrEntreCallesP, 
                                    String pStrColoniaP, 
                                    String pStrCiudadOMunicipioP, 
                                    String pStrEstadoPValue, 
                                    String pStrEstadoPText,
                                    String pStrCPPValue, 
                                    String pStrCPPText, 
                                    String pStrCedulaP, 
                                    String pStrRFCS, 
                                    String pStrRazonSocialS, 
                                    String pStrDireccionS, 
                                    String pStrNumeroExtS,
                                    String pStrNumeroIntS,
                                    String pStrEntreCallesS, 
                                    String pStrColoniaS, 
                                    String pStrCiudadOMunicipioS, 
                                    String pStrEstadoSValue, 
                                    String pStrEstadoSText, 
                                    String pStrCPSValue, 
                                    String pStrCPSText,
                                    String pStrCedulaS, 
                                    String pCedulaExaminePFileName,
                                    String pCedulaExaminePContentType,
                                    oracle.jbo.domain.BlobDomain pCedulaExaminePByteStream,
                                    String pCedulaExamineSFileName,
                                    String pCedulaExamineSContentType,
                                    oracle.jbo.domain.BlobDomain pCedulaExamineSByteStream,
                                    String pStrOperatingUnitPValue,
                                    String pStrOperatingUnitSValue) {
        XxqpPdftClientesDirFiscalVOImpl xxqpPdftClientesDirFiscalVOImpl = getXxqpPdftClientesDirFiscalVO1(); 
        XxqpPdftClientesDirFiscalVORowImpl xxqpPdftClientesDirFiscalVORowImpl = null; 
        OADBTransaction oADBTransaction = this.getOADBTransaction();
        if(null!=xxqpPdftClientesDirFiscalVOImpl){
         if(!xxqpPdftClientesDirFiscalVOImpl.isPreparedForExecution()){
             xxqpPdftClientesDirFiscalVOImpl.executeQuery();
         }
            xxqpPdftClientesDirFiscalVORowImpl = (XxqpPdftClientesDirFiscalVORowImpl)xxqpPdftClientesDirFiscalVOImpl.createRow();
            oracle.jbo.domain.Number numDireccionFiscalId = oADBTransaction.getSequenceValue("XXQP_PDFT_CLIENTES_DIR_FISC_S"); 
            xxqpPdftClientesDirFiscalVORowImpl.setId(numDireccionFiscalId);
            oracle.jbo.domain.Number numHeaderId=null;
            try {
                numHeaderId = new oracle.jbo.domain.Number(pStrHeaderId);
            } catch (SQLException sqle) {
               throw new OAException("SQLException: Direccion Fiscal attributo Header ID",OAException.ERROR);
            }
            xxqpPdftClientesDirFiscalVORowImpl.setHeaderId(numHeaderId);
            xxqpPdftClientesDirFiscalVORowImpl.setPrimRfc(pStrRFCP);
            xxqpPdftClientesDirFiscalVORowImpl.setPrimRazonSocial(pStrRazonSocialP);
            xxqpPdftClientesDirFiscalVORowImpl.setPrimDireccion(pStrDireccionP);
            xxqpPdftClientesDirFiscalVORowImpl.setPrimNumeroExt(pStrNumeroExtP);
            xxqpPdftClientesDirFiscalVORowImpl.setPrimNumeroInt(pStrNumeroIntP);
            xxqpPdftClientesDirFiscalVORowImpl.setPrimEntreCalles(pStrEntreCallesP);
            xxqpPdftClientesDirFiscalVORowImpl.setPrimColonia(pStrColoniaP);
            xxqpPdftClientesDirFiscalVORowImpl.setPrimCiudadOMpo(pStrCiudadOMunicipioP);
            xxqpPdftClientesDirFiscalVORowImpl.setPrimEstadoC(pStrEstadoPValue);
            xxqpPdftClientesDirFiscalVORowImpl.setPrimCodigoPostalC(pStrCPPValue);
            xxqpPdftClientesDirFiscalVORowImpl.setPrimCedula(pStrCedulaP);
            xxqpPdftClientesDirFiscalVORowImpl.setSecRfc(pStrRFCS);
            xxqpPdftClientesDirFiscalVORowImpl.setSecRazonSocial(pStrRazonSocialS);
            xxqpPdftClientesDirFiscalVORowImpl.setSecDireccion(pStrDireccionS);
            xxqpPdftClientesDirFiscalVORowImpl.setSecNumeroExt(pStrNumeroExtS);
            xxqpPdftClientesDirFiscalVORowImpl.setSecNumeroInt(pStrNumeroIntS);
            xxqpPdftClientesDirFiscalVORowImpl.setSecEntreCalles(pStrEntreCallesS);
            xxqpPdftClientesDirFiscalVORowImpl.setSecColonia(pStrColoniaS);
            xxqpPdftClientesDirFiscalVORowImpl.setSecCiudadOMpo(pStrCiudadOMunicipioS);
            xxqpPdftClientesDirFiscalVORowImpl.setSecEstadoC(pStrEstadoSValue);
            xxqpPdftClientesDirFiscalVORowImpl.setSecCodigoPostalC(pStrCPSValue);
            xxqpPdftClientesDirFiscalVORowImpl.setSecCedula(pStrCedulaS);
            
            xxqpPdftClientesDirFiscalVORowImpl.setPrimCedulaFileName(pCedulaExaminePFileName);
            xxqpPdftClientesDirFiscalVORowImpl.setPrimCedulaContentType(pCedulaExaminePContentType);
            xxqpPdftClientesDirFiscalVORowImpl.setPrimCedulaFile(pCedulaExaminePByteStream);
            
            xxqpPdftClientesDirFiscalVORowImpl.setSecCedulaFileName(pCedulaExamineSFileName);
            xxqpPdftClientesDirFiscalVORowImpl.setSecCedulaContentType(pCedulaExamineSContentType);
            xxqpPdftClientesDirFiscalVORowImpl.setSecCedulaFile(pCedulaExamineSByteStream);
            xxqpPdftClientesDirFiscalVORowImpl.setPrimOperatingUnit(pStrOperatingUnitPValue);
            xxqpPdftClientesDirFiscalVORowImpl.setSecOperatingUnit(pStrOperatingUnitSValue);
            
            xxqpPdftClientesDirFiscalVOImpl.insertRow(xxqpPdftClientesDirFiscalVORowImpl);
            
            this.getOADBTransaction().commit();
            
        }
       
    }


    public XxqpPdftClientesHeaderVORowImpl initClientesHeaderReOnVO(String pStrClientesHeaderId) {
        XxqpPdftClientesHeaderVORowImpl retval = null; 
    oracle.jbo.domain.Number numClientesHeaderd=null;
    try {
        numClientesHeaderd = new oracle.jbo.domain.Number(pStrClientesHeaderId);
    } catch (SQLException sqle) {
        throw new OAException("SQLException metodo initClientesHeaderReOnVO parametro pStrClientesHeaderId",OAException.ERROR); 
    }
        XxqpPdftClientesHeaderVOImpl xxqpPdftClientesHeaderVOImpl = getXxqpPdftClientesHeaderVO1(); 
        if(null!=xxqpPdftClientesHeaderVOImpl){
         if(!xxqpPdftClientesHeaderVOImpl.isPreparedForExecution())
             xxqpPdftClientesHeaderVOImpl.initByClienteHeaderId(numClientesHeaderd);
        }
        
       RowSetIterator ClientesHeaderIterator = xxqpPdftClientesHeaderVOImpl.createRowSetIterator(null);
       if(ClientesHeaderIterator.hasNext()){
          retval = (XxqpPdftClientesHeaderVORowImpl)ClientesHeaderIterator.next();
       }
        ClientesHeaderIterator.closeRowSetIterator();
      return retval;   
        
    }

    public XxqpPdftClientesDirFiscalVORowImpl initClientesDirFiscalReOnVO(String pStrClientesHeaderId
                                                                         ,String pOperatingUnit) {
        XxqpPdftClientesDirFiscalVORowImpl  retval = null;
        oracle.jbo.domain.Number numClientesHeaderId=null;
        try {
            numClientesHeaderId = new oracle.jbo.domain.Number(pStrClientesHeaderId);
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo initClientesDirFiscalReOnVO parametro pStrClientesHeaderId",OAException.ERROR); 
        }
        XxqpPdftClientesDirFiscalVOImpl xxqpPdftClientesDirFiscalVOImpl = getXxqpPdftClientesDirFiscalVO1(); 
        if(null!=xxqpPdftClientesDirFiscalVOImpl){
            xxqpPdftClientesDirFiscalVOImpl.initByClienteHeaderId(numClientesHeaderId
                                                                 ,pOperatingUnit
                                                                 );
        }
       RowSetIterator ClientesDirFiscalIterator = xxqpPdftClientesDirFiscalVOImpl.createRowSetIterator(null);
       if(ClientesDirFiscalIterator.hasNext()){
         retval = (XxqpPdftClientesDirFiscalVORowImpl)ClientesDirFiscalIterator.next();
       }
        ClientesDirFiscalIterator.closeRowSetIterator();
        return retval;
        
    }

    public void fillPuntoDeRecoleccion(String pStrHeaderId, 
                                       String pStrEntregaEnQPP, 
                                       String pStrNombreP, 
                                       String pStrContactoP, 
                                       String pStrPuDeReDireccionP, 
                                       String pStrDiaP, 
                                       String pStrHoraP, 
                                       String pStrEntregaEnQPS, 
                                       String pStrNombreS, 
                                       String pStrContactoS, 
                                       String pStrPuDeReDireccionS, 
                                       String pStrDiaS, 
                                       String pStrHoraS) {
        oracle.jbo.domain.Number numHeaderId=null;
        try {
            numHeaderId = new oracle.jbo.domain.Number(pStrHeaderId);
        } catch (SQLException sqle) {
           throw new OAException("SQLException: Punto de Recoleccion attributo Header ID",OAException.ERROR);
        }
        XxqpPdftClientesPuntoRecoVOImpl xxqpPdftClientesPuntoRecoVOImpl= getXxqpPdftClientesPuntoRecoVO1();
        XxqpPdftClientesPuntoRecoVORowImpl xxqpPdftClientesPuntoRecoVORowImpl= null;
        OADBTransaction oADBTransaction = this.getOADBTransaction();
        if(null!=xxqpPdftClientesPuntoRecoVOImpl){
          if(!xxqpPdftClientesPuntoRecoVOImpl.isPreparedForExecution()){
              xxqpPdftClientesPuntoRecoVOImpl.executeQuery();
          }
            xxqpPdftClientesPuntoRecoVORowImpl = (XxqpPdftClientesPuntoRecoVORowImpl)xxqpPdftClientesPuntoRecoVOImpl.createRow();
            oracle.jbo.domain.Number numPuntoRecoleccionId = oADBTransaction.getSequenceValue("XXQP_PDFT_CLIENTES_PUNT_RECO_S"); 
            xxqpPdftClientesPuntoRecoVORowImpl.setId(numPuntoRecoleccionId);
            xxqpPdftClientesPuntoRecoVORowImpl.setHeaderId(numHeaderId);
            xxqpPdftClientesPuntoRecoVORowImpl.setPrimEntregaEnQp(pStrEntregaEnQPP);
            xxqpPdftClientesPuntoRecoVORowImpl.setPrimNombre(pStrNombreP);
            xxqpPdftClientesPuntoRecoVORowImpl.setPrimContacto(pStrContactoP);
            xxqpPdftClientesPuntoRecoVORowImpl.setPrimDireccion(pStrPuDeReDireccionP);
            xxqpPdftClientesPuntoRecoVORowImpl.setPrimDia(pStrDiaP);
            xxqpPdftClientesPuntoRecoVORowImpl.setPrimHorario(pStrHoraP);
            
            xxqpPdftClientesPuntoRecoVORowImpl.setSecEntregaEnQp(pStrEntregaEnQPS);
            xxqpPdftClientesPuntoRecoVORowImpl.setSecNombre(pStrNombreS);
            xxqpPdftClientesPuntoRecoVORowImpl.setSecContacto(pStrContactoS);
            xxqpPdftClientesPuntoRecoVORowImpl.setSecDireccion(pStrPuDeReDireccionS);
            xxqpPdftClientesPuntoRecoVORowImpl.setSecDia(pStrDiaS);
            xxqpPdftClientesPuntoRecoVORowImpl.setSecHorario(pStrHoraS);
            
            xxqpPdftClientesPuntoRecoVOImpl.insertRow(xxqpPdftClientesPuntoRecoVORowImpl);
            
            oADBTransaction.commit();
            
        } /** END if(null!=xxqpPdftClientesPuntoRecoVOImpl) **/
        
    }

    public XxqpPdftClientesPuntoRecoVORowImpl initClientesPuntoRecolecReOnVO(String pStrClientesHeaderId) {
        XxqpPdftClientesPuntoRecoVORowImpl retval =null;
        oracle.jbo.domain.Number numClientesHeaderId=null;
        try {
            numClientesHeaderId = new oracle.jbo.domain.Number(pStrClientesHeaderId);
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo initClientesPuntoRecolecReOnVO parametro pStrClientesHeaderId",OAException.ERROR); 
        }
        XxqpPdftClientesPuntoRecoVOImpl xxqpPdftClientesPuntoRecoVOImpl= getXxqpPdftClientesPuntoRecoVO1();
        if(null!=xxqpPdftClientesPuntoRecoVOImpl){
            xxqpPdftClientesPuntoRecoVOImpl.initByClienteHeaderId(numClientesHeaderId);
        }
        
        RowSetIterator PuntoRecoIterator = xxqpPdftClientesPuntoRecoVOImpl.createRowSetIterator(null);
        if(PuntoRecoIterator.hasNext()){
          retval = (XxqpPdftClientesPuntoRecoVORowImpl)PuntoRecoIterator.next();
        }
        PuntoRecoIterator.closeRowSetIterator();
        return retval;
    }


    public void fillContactos(String pStrHeaderId) {
    
        oracle.jbo.domain.Number numHeaderId=null;
        try {
            numHeaderId = new oracle.jbo.domain.Number(pStrHeaderId);
        } catch (SQLException sqle) {
           throw new OAException("SQLException: Contactos attributo Header ID",OAException.ERROR);
        }
        
        ContactosTmpVOImpl contactosTmpVOImpl = getContactosTmpVO1();
        ContactosTmpVORowImpl contactosTmpVORowImpl = null; 
        XxqpPdftClientesContactosVOImpl xxqpPdftClientesContactosVOImpl =getXxqpPdftClientesContactosVO1();
        XxqpPdftClientesContactosVORowImpl xxqpPdftClientesContactosVORowImpl = null; 
        OADBTransaction oADBTransaction = this.getOADBTransaction();
        
        if(null!=contactosTmpVOImpl){
        
        RowSetIterator contactosTmpIterator = contactosTmpVOImpl.createRowSetIterator(null);
        while(contactosTmpIterator.hasNext()){
        
        contactosTmpVORowImpl = (ContactosTmpVORowImpl)contactosTmpIterator.next();
        
        if(null!=xxqpPdftClientesContactosVOImpl){
          if(!xxqpPdftClientesContactosVOImpl.isPreparedForExecution()){
              xxqpPdftClientesContactosVOImpl.executeQuery();
          }
            xxqpPdftClientesContactosVORowImpl = (XxqpPdftClientesContactosVORowImpl)xxqpPdftClientesContactosVOImpl.createRow();
            oracle.jbo.domain.Number numContactosId = oADBTransaction.getSequenceValue("XXQP_PDFT_CLIENTES_CONTACTOS_S"); 
            xxqpPdftClientesContactosVORowImpl.setId(numContactosId);
            xxqpPdftClientesContactosVORowImpl.setHeaderId(numHeaderId);
            xxqpPdftClientesContactosVORowImpl.setTipoContacto(contactosTmpVORowImpl.getTipoDeContacto());
            xxqpPdftClientesContactosVORowImpl.setNombre(contactosTmpVORowImpl.getNombre());
            xxqpPdftClientesContactosVORowImpl.setDireccion(contactosTmpVORowImpl.getDireccion());
            xxqpPdftClientesContactosVORowImpl.setTelefono(contactosTmpVORowImpl.getTelefono());
            xxqpPdftClientesContactosVORowImpl.setCorreoElectronico(contactosTmpVORowImpl.getCorreoElectronico()); 
            xxqpPdftClientesContactosVORowImpl.setPuesto(contactosTmpVORowImpl.getPuesto());
            xxqpPdftClientesContactosVORowImpl.setNumeroCelular(contactosTmpVORowImpl.getNumeroCelular());
            xxqpPdftClientesContactosVOImpl.insertRow(xxqpPdftClientesContactosVORowImpl);
            
            oADBTransaction.commit();
            
        } /** END if(null!=xxqpPdftClientesContactosVOImpl){ **/
        } /** END while(contactosTmpIterator.hasNext()){ **/
         contactosTmpIterator.closeRowSetIterator();
        } /** END if(null!=contactosTmpVOImpl){ **/
        
    }

    public XxqpPdftClientesContactosVORowImpl initClientesContactosReOnVO(String pStrClientesHeaderId) {
        XxqpPdftClientesContactosVORowImpl retval = null; 
        oracle.jbo.domain.Number numClientesHeaderId=null;
        try {
            numClientesHeaderId = new oracle.jbo.domain.Number(pStrClientesHeaderId);
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo initClientesContactosReOnVO parametro pStrClientesHeaderId",OAException.ERROR); 
        }
        XxqpPdftClientesContactosVOImpl xxqpPdftClientesContactosVOImpl =getXxqpPdftClientesContactosVO1();
        if(null!=xxqpPdftClientesContactosVOImpl){
            xxqpPdftClientesContactosVOImpl.initByClienteHeaderId(numClientesHeaderId);
        }
        
        RowSetIterator ClientesContactosIterator = xxqpPdftClientesContactosVOImpl.createRowSetIterator(null);
        if(ClientesContactosIterator.hasNext()){
           retval = (XxqpPdftClientesContactosVORowImpl)ClientesContactosIterator.next();
        }
        ClientesContactosIterator.closeRowSetIterator();
        
        return retval; 
    }

    public void fillFacturacionPago(String pStrHeaderId, 
                                    String strCondicionesDePagoValue, 
                                    String strCondicionesDePagoText, 
                                    String strTipoDePagoValue, 
                                    String strTipoDePagoText, 
                                    String strObservaciones, 
                                    String strRequiereAdendasValue, 
                                    String strRequiereAdendasText, 
                                    String strRequiereFacturaValue, 
                                    String strRequiereFacturaText, 
                                    String strMotivo, 
                                    String strCicloFacturacionValue, 
                                    String strCicloFacturacionText, 
                                    String strMetodoDePagoValue, 
                                    String strMetodoDePagoText, 
                                    String strUsoDelCFDIValue, 
                                    String strUsoDelCFDIText, 
                                    String strUtilizaPortalValue, 
                                    String strUtilizaPortalText, 
                                    String strNumCuenta, 
                                    String strPortalDeFacturas, 
                                    String strNombreBanco, 
                                    String strOrdenDeCompraValue, 
                                    String strOrdenDeCompraText, 
                                    String strDiasNaturales, 
                                    String strContratoValue, 
                                    String strContratoText, 
                                    String strDiasRecepcion, 
                                    String strVigenciaDeContrato,
                                    String strLunes,
                                    String strMartes,
                                    String strMiercoles,
                                    String strJueves,
                                    String strViernes,
                                    String strSabado,
                                    String strDomingo) {
        oracle.jbo.domain.Number numHeaderId=null;
        try {
            numHeaderId = new oracle.jbo.domain.Number(pStrHeaderId);
        } catch (SQLException sqle) {
           throw new OAException("SQLException: Contactos attributo Header ID",OAException.ERROR);
        }
        
        XxqpPdftClientesFactPagVOImpl xxqpPdftClientesFactPagVOImpl = getXxqpPdftClientesFactPagVO1();         
        XxqpPdftClientesFactPagVORowImpl xxqpPdftClientesFactPagVORowImpl = null; 
        OADBTransaction oADBTransaction = this.getOADBTransaction();
        
        if(null!=xxqpPdftClientesFactPagVOImpl){
          if(!xxqpPdftClientesFactPagVOImpl.isPreparedForExecution()){
              xxqpPdftClientesFactPagVOImpl.executeQuery();
          }
           xxqpPdftClientesFactPagVORowImpl = (XxqpPdftClientesFactPagVORowImpl)xxqpPdftClientesFactPagVOImpl.createRow();
           oracle.jbo.domain.Number numFacturacionPagoId = oADBTransaction.getSequenceValue("XXQP_PDFT_CLIENTES_FACT_PAG_S"); 
            xxqpPdftClientesFactPagVORowImpl.setId(numFacturacionPagoId);
            xxqpPdftClientesFactPagVORowImpl.setHeaderId(numHeaderId);
            xxqpPdftClientesFactPagVORowImpl.setCondicionesDePagoC(strCondicionesDePagoValue);
            xxqpPdftClientesFactPagVORowImpl.setTipoDePagoC(strTipoDePagoValue);
            xxqpPdftClientesFactPagVORowImpl.setObservaciones(strObservaciones);
            xxqpPdftClientesFactPagVORowImpl.setRequiereAdendasC(strRequiereAdendasValue);
            xxqpPdftClientesFactPagVORowImpl.setRequiereFacturaC(strRequiereFacturaValue);
            xxqpPdftClientesFactPagVORowImpl.setMotivo(strMotivo);
            xxqpPdftClientesFactPagVORowImpl.setCicloDeFacturacionC(strCicloFacturacionValue);
            xxqpPdftClientesFactPagVORowImpl.setMetodoDePagoC(strMetodoDePagoValue);
            xxqpPdftClientesFactPagVORowImpl.setUsoDelCfdiC(strUsoDelCFDIValue);
            xxqpPdftClientesFactPagVORowImpl.setUtilizaPortalC(strUtilizaPortalValue);
            xxqpPdftClientesFactPagVORowImpl.setNumeroDeCuenta(strNumCuenta);
            xxqpPdftClientesFactPagVORowImpl.setPortalLink(strPortalDeFacturas);
            xxqpPdftClientesFactPagVORowImpl.setNombreDelBanco(strNombreBanco);
            xxqpPdftClientesFactPagVORowImpl.setOrdenDeCompraC(strOrdenDeCompraValue);
            xxqpPdftClientesFactPagVORowImpl.setDiasNatDeCredito(strDiasNaturales);
            xxqpPdftClientesFactPagVORowImpl.setContratoC(strContratoValue);
            xxqpPdftClientesFactPagVORowImpl.setDiasRecepcionFactur(strDiasRecepcion);
            xxqpPdftClientesFactPagVORowImpl.setVigenciaContrato(strVigenciaDeContrato);
            xxqpPdftClientesFactPagVORowImpl.setLunes(strLunes);
            xxqpPdftClientesFactPagVORowImpl.setMartes(strMartes);
            xxqpPdftClientesFactPagVORowImpl.setMiercoles(strMiercoles);
            xxqpPdftClientesFactPagVORowImpl.setJueves(strJueves);
            xxqpPdftClientesFactPagVORowImpl.setViernes(strViernes);
            xxqpPdftClientesFactPagVORowImpl.setSabado(strSabado);
            xxqpPdftClientesFactPagVORowImpl.setDomingo(strDomingo);
            
           xxqpPdftClientesFactPagVOImpl.insertRow(xxqpPdftClientesFactPagVORowImpl);
           
            oADBTransaction.commit();
           
        } /** END if(null!=xxqpPdftClientesFactPagVOImpl){ **/
    }

    public XxqpPdftClientesFactPagVORowImpl initClientesFactPagoReOnVO(String pStrClientesHeaderId) {
        XxqpPdftClientesFactPagVORowImpl retval = null; 
        oracle.jbo.domain.Number numClientesHeaderId=null;
        try {
            numClientesHeaderId = new oracle.jbo.domain.Number(pStrClientesHeaderId);
        } catch (SQLException sqle) {
            throw new OAException("SQLException metodo initClientesFactPagoReOnVO parametro pStrClientesHeaderId",OAException.ERROR); 
        }
        XxqpPdftClientesFactPagVOImpl xxqpPdftClientesFactPagVOImpl = getXxqpPdftClientesFactPagVO1();
        if(null!=xxqpPdftClientesFactPagVOImpl){
            xxqpPdftClientesFactPagVOImpl.initByClienteHeaderId(numClientesHeaderId);   
        }
        
        RowSetIterator ClientesFactPagIterator = xxqpPdftClientesFactPagVOImpl.createRowSetIterator(null);
        if(ClientesFactPagIterator.hasNext()){
           retval = (XxqpPdftClientesFactPagVORowImpl)ClientesFactPagIterator.next();
        }
        ClientesFactPagIterator.closeRowSetIterator();
        return retval;
        
    }

    /**Container's getter for CedulasTmpVO1
     */
    public CedulasTmpVOImpl getCedulasTmpVO1() {
        return (CedulasTmpVOImpl)findViewObject("CedulasTmpVO1");
    }

    public void initCedulasTmpVO() {
        CedulasTmpVOImpl cedulasTmpVOImpl = getCedulasTmpVO1(); 
        CedulasTmpVORowImpl cedulasTmpVORowImpl = null; 
        if(!cedulasTmpVOImpl.isPreparedForExecution()){
            cedulasTmpVOImpl.executeQuery();
        }
        if(1==cedulasTmpVOImpl.getFetchedRowCount()){
         return;
        }
        
        cedulasTmpVORowImpl = (CedulasTmpVORowImpl)cedulasTmpVOImpl.createRow();
        cedulasTmpVOImpl.insertRow(cedulasTmpVORowImpl);
    
    }

    
    public com.sun.java.util.collections.List validaClienteRFCRazonSocial(String pStrNombreCliente 
                                                                         ,String pStrRFCPrimaria
                                                                         ,String pStrRazonSocialPrimaria
                                                                         ,String pStrRFC
                                                                         ) {
        com.sun.java.util.collections.List listRetval = new com.sun.java.util.collections.ArrayList(); 
      String strOraclePreparedStatement =" select 'Razon Social:'||PTY.PARTY_NAME||' ya existe en Oracle.' message " + 
                                         "   from HZ_PARTIES PTY " + 
                                         "   where PTY.PARTY_NAME = ? " + 
                                         "   UNION  " + 
                                         "   select 'RFC:'||PTY.ATTRIBUTE1||' ya existe en Oracle.' message " + 
                                         "   from HZ_PARTIES PTY " + 
                                         "    where PTY.ATTRIBUTE1 = ? " + 
                                         "   UNION " + 
                                         "   select 'Nombre del Cliente:'||PTY.KNOWN_AS||' ya existe en Oracle.' message " + 
                                         "   from HZ_PARTIES PTY " + 
                                         "    where PTY.KNOWN_AS = ? "+
                                         " UNION "+
                                         " select 'RFC:'||ORIG_SYSTEM_REFERENCE||' ya existe en Oracle.' " + 
                                         "    from XXQP_HzPuiAccountTableVO " + 
                                         "  where ORIG_SYSTEM_REFERENCE = ?"; 
                                         
      String strPortalPreparedStatement = "  select 'Nombre del Cliente:'|| pch.nombre_cliente||' ya existe en el portal.' message " + 
                                          "      from XXQP_PDFT_CLIENTES_HEADER pch " + 
                                          "    where pch.nombre_cliente = ? " + 
                                          "     union  " + 
                                          "    select 'RFC:'||pcdf.PRIM_RFC||' ya existe en el portal.' message " + 
                                          "      from XXQP_PDFT_CLIENTES_DIR_FISCAL pcdf " + 
                                          "     where pcdf.PRIM_RFC = ? " + 
                                          "    union " + 
                                          "    select 'Razon Social:'||pcdf.PRIM_RAZON_SOCIAL||' ya existe en el portal.' message " + 
                                          "      from XXQP_PDFT_CLIENTES_DIR_FISCAL pcdf " + 
                                          "     where pcdf.PRIM_RAZON_SOCIAL = ? ";
      java.sql.Connection slqConecction = this.getOADBTransaction().getJdbcConnection(); 
      java.sql.PreparedStatement sqlPreparedStatement= null;
      java.sql.ResultSet sqlResultSet = null; 
          
        /** Consulta Info de Oracle AR **/
        try {
            sqlPreparedStatement =  slqConecction.prepareStatement(strOraclePreparedStatement,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
            sqlPreparedStatement.setString(1,pStrRazonSocialPrimaria);
            sqlPreparedStatement.setString(2,pStrRFCPrimaria);
            sqlPreparedStatement.setString(3,pStrNombreCliente);
            sqlPreparedStatement.setString(4,pStrRFC);
            sqlResultSet = sqlPreparedStatement.executeQuery();
            while(sqlResultSet.next()){
                listRetval.add(new OAException(sqlResultSet.getString("message"),OAException.ERROR)); 
            }
        } catch (SQLException sqle) {
            throw new OAException("SQLException Metodo validaClienteRFCRazonSocial:"+sqle.getErrorCode()+" ,"+sqle.getSQLState()+" ,"+sqle.getMessage(),OAException.ERROR); 
        }
        closeResultSet(sqlResultSet);
        closePreparedStatement(sqlPreparedStatement);
        
        /** Consulta Info del Modulo Custom PDFT **/
        try {
            sqlPreparedStatement =  slqConecction.prepareStatement(strPortalPreparedStatement,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
            sqlPreparedStatement.setString(1,pStrNombreCliente);
            sqlPreparedStatement.setString(2,pStrRFCPrimaria);
            sqlPreparedStatement.setString(3,pStrRazonSocialPrimaria);
            sqlResultSet = sqlPreparedStatement.executeQuery();
            while(sqlResultSet.next()){
                listRetval.add(new OAException(sqlResultSet.getString("message"),OAException.ERROR)); 
            }
        } catch (SQLException sqle) {
            throw new OAException("SQLException Metodo validaClienteRFCRazonSocial:"+sqle.getErrorCode()+" ,"+sqle.getSQLState()+" ,"+sqle.getMessage(),OAException.ERROR); 
        }
        closeResultSet(sqlResultSet);
        closePreparedStatement(sqlPreparedStatement);
        
        
        
        return listRetval;
    }

    private void closeResultSet(ResultSet pSqlResultSet) {
     if(null!=pSqlResultSet){
            try {
                pSqlResultSet.close();
            } catch (SQLException sqle) {
                throw new OAException("SQLException Metodo closeResultSet:"+sqle.getErrorCode()+" ,"+sqle.getSQLState(),OAException.ERROR); 
            }
        }
    } /** END private void closeResultSet **/

    private void closePreparedStatement(PreparedStatement pSqlPreparedStatement) {
     if(null!=pSqlPreparedStatement){
            try {
                pSqlPreparedStatement.close();
            } catch (SQLException sqle) {
                throw new OAException("SQLException Metodo closePreparedStatement:"+sqle.getErrorCode()+" ,"+sqle.getSQLState(),OAException.ERROR); 
            }
        }
    } /** END  private void closePreparedStatement **/
    
     public String[] callFromPdftToOracle() {
         String[] retval = new String[2];
         XxqpPdftClientesHeaderVORowImpl xxqpPdftClientesHeaderVORowImpl = (XxqpPdftClientesHeaderVORowImpl)this.getXxqpPdftClientesHeaderVO1().getCurrentRow();
         oracle.jbo.domain.Number numClienteHeaderId = xxqpPdftClientesHeaderVORowImpl.getId();
         System.out.println("numClienteHeaderId:"+numClienteHeaderId);
         String strErrmsg = null; 
         String strErrcode = null;
         String strCallableStmt = " BEGIN " +
                                  " APPS.XXQP_PDFT_CLIENTES_PKG.from_pdft_to_oracle ( PSO_ERRMSG                       => :1\n" + 
                                  "                                                 , PSO_ERRCODE                      => :2\n" + 
                                  "                                                 , PNI_CLIENTE_HEADER_ID            => :3\n" + 
                                  "                                                  ); " +
                                  " END;";
         OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
         OracleCallableStatement oraclecallablestatement =  (OracleCallableStatement)oadbtransaction.createCallableStatement(strCallableStmt, 1);
         try {
             oraclecallablestatement.registerOutParameter(1,Types.VARCHAR);
             oraclecallablestatement.registerOutParameter(2,Types.VARCHAR);
             oraclecallablestatement.setDouble(3,numClienteHeaderId.doubleValue());
             oraclecallablestatement.execute();
             strErrmsg = oraclecallablestatement.getString(1); 
             strErrcode = oraclecallablestatement.getString(2); 
             System.out.println("strErrmsg:"+strErrmsg);
             System.out.println("strErrcode:"+strErrcode);
             retval[0]=strErrmsg; 
             retval[1]=strErrcode; 
         } catch (SQLException sqle) {
             throw new OAException("SQLException en el metodo callFromPdftToOracle:"+sqle.getMessage()+", "+sqle.getErrorCode(),OAException.ERROR); 
         }
         
         return retval; 
         
     }

    public void callUpdFromPdftToOracle(Number numPartyId, 
                                        Number numClienteHeaderId) {
        String strErrmsg = null; 
        String strErrcode = null;
        String strCallableStmt =    " begin " + 
                                    " XXQP_PDFT_CLIENT_FPTO_UPD_PKG.upd_from_pdft_to_oracle(pso_errmsg                    => :1 " + 
                                    "                                                      ,pso_errcode                   => :2 " + 
                                    "                                                      ,pni_party_id                  => :3 " + 
                                    "                                                      ,pni_cliente_header_id         => :4 " + 
                                    "                                                       ); \n" + 
                                    " end; ";
        OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
        OracleCallableStatement oraclecallablestatement =  (OracleCallableStatement)oadbtransaction.createCallableStatement(strCallableStmt, 1);
        try {
            oraclecallablestatement.registerOutParameter(1,Types.VARCHAR);
            oraclecallablestatement.registerOutParameter(2,Types.VARCHAR);
            oraclecallablestatement.setDouble(3,numPartyId.doubleValue());
            oraclecallablestatement.setDouble(4,numClienteHeaderId.doubleValue());
            oraclecallablestatement.execute();
            strErrmsg = oraclecallablestatement.getString(1); 
            strErrcode = oraclecallablestatement.getString(2); 
            System.out.println("strErrmsg:"+strErrmsg);
            System.out.println("strErrcode:"+strErrcode);
        } catch (SQLException sqle) {
            throw new OAException("SQLException en el metodo callUpdFromPdftToOracle:"+sqle.getMessage()+", "+sqle.getErrorCode(),OAException.ERROR); 
        }
    }

    public List validaContactosTmpVO() {
        com.sun.java.util.collections.List retval = new com.sun.java.util.collections.ArrayList(); 
        
           ContactosTmpVOImpl contactosTmpVOImpl = getContactosTmpVO1();
           ContactosTmpVORowImpl contactosTmpVORowImpl = null; 
           if(null!=contactosTmpVOImpl){
             if(!contactosTmpVOImpl.isPreparedForExecution()){
             contactosTmpVOImpl.executeQuery();
             }
              RowSetIterator iterator = contactosTmpVOImpl.createRowSetIterator(null);
              while(iterator.hasNext()){
                 contactosTmpVORowImpl = (ContactosTmpVORowImpl)iterator.next();
                 String strTipoDeContacto = contactosTmpVORowImpl.getTipoDeContacto();
                 if("Cierre y Seguimiento".equals(strTipoDeContacto)){
                   if((null==contactosTmpVORowImpl.getNombre()||"".equals(contactosTmpVORowImpl.getNombre()))
                      ||(null==contactosTmpVORowImpl.getDireccion()||"".equals(contactosTmpVORowImpl.getDireccion()))
                      ||(null==contactosTmpVORowImpl.getTelefono()||"".equals(contactosTmpVORowImpl.getTelefono()))
                      ||(null==contactosTmpVORowImpl.getCorreoElectronico()||"".equals(contactosTmpVORowImpl.getCorreoElectronico()))
                      ||(null==contactosTmpVORowImpl.getPuesto()||"".equals(contactosTmpVORowImpl.getPuesto()))
                      ||(null==contactosTmpVORowImpl.getNumeroCelular()||"".equals(contactosTmpVORowImpl.getNumeroCelular()))
                      ){
                          retval.add(new OAException("Tipo de Contacto Cierre y Seguimiento es requerido.",OAException.ERROR));
                      }
                 }else if("Cobranza".equals(strTipoDeContacto)){
                     if((null==contactosTmpVORowImpl.getNombre()||"".equals(contactosTmpVORowImpl.getNombre()))
                        ||(null==contactosTmpVORowImpl.getDireccion()||"".equals(contactosTmpVORowImpl.getDireccion()))
                        ||(null==contactosTmpVORowImpl.getTelefono()||"".equals(contactosTmpVORowImpl.getTelefono()))
                        ||(null==contactosTmpVORowImpl.getCorreoElectronico()||"".equals(contactosTmpVORowImpl.getCorreoElectronico()))
                        ||(null==contactosTmpVORowImpl.getPuesto()||"".equals(contactosTmpVORowImpl.getPuesto()))
                        ||(null==contactosTmpVORowImpl.getNumeroCelular()||"".equals(contactosTmpVORowImpl.getNumeroCelular()))
                        ){
                            retval.add(new OAException("Tipo de Contacto Cobranza es requerido.",OAException.ERROR));
                        }
                 }else if("Gerencial".equals(strTipoDeContacto)){
                     if((null==contactosTmpVORowImpl.getNombre()||"".equals(contactosTmpVORowImpl.getNombre()))
                        ||(null==contactosTmpVORowImpl.getDireccion()||"".equals(contactosTmpVORowImpl.getDireccion()))
                        ||(null==contactosTmpVORowImpl.getTelefono()||"".equals(contactosTmpVORowImpl.getTelefono()))
                        ||(null==contactosTmpVORowImpl.getCorreoElectronico()||"".equals(contactosTmpVORowImpl.getCorreoElectronico()))
                        ||(null==contactosTmpVORowImpl.getPuesto()||"".equals(contactosTmpVORowImpl.getPuesto()))
                        ||(null==contactosTmpVORowImpl.getNumeroCelular()||"".equals(contactosTmpVORowImpl.getNumeroCelular()))
                        ){
                            retval.add(new OAException("Tipo de Contacto Gerencial es requerido.",OAException.ERROR));
                        }
                 }
                  /**contactosTmpVORowImpl.setIsRequired("yes"); **/
        
              } /** END  while(iterator.hasNext()){ **/
               iterator.closeRowSetIterator();
           } /** END if(null!=contactosTmpVOImpl){ **/
        
        return retval; 
    }

    public List validaClientesContactosVO() {
        com.sun.java.util.collections.List retval = new com.sun.java.util.collections.ArrayList(); 
        
          XxqpPdftClientesContactosVOImpl xxqpPdftClientesContactosVOImpl = getXxqpPdftClientesContactosVO1();
          XxqpPdftClientesContactosVORowImpl xxqpPdftClientesContactosVORowImpl  = null; 
           if(null!=xxqpPdftClientesContactosVOImpl){
             if(!xxqpPdftClientesContactosVOImpl.isPreparedForExecution()){
             xxqpPdftClientesContactosVOImpl.executeQuery();
             }
              RowSetIterator iterator = xxqpPdftClientesContactosVOImpl.createRowSetIterator(null);
              while(iterator.hasNext()){
                 xxqpPdftClientesContactosVORowImpl = (XxqpPdftClientesContactosVORowImpl)iterator.next();
                 String strTipoDeContacto = xxqpPdftClientesContactosVORowImpl.getTipoContacto();
                 if("Cierre y Seguimiento".equals(strTipoDeContacto)){
                   if((null==xxqpPdftClientesContactosVORowImpl.getNombre()||"".equals(xxqpPdftClientesContactosVORowImpl.getNombre()))
                      ||(null==xxqpPdftClientesContactosVORowImpl.getDireccion()||"".equals(xxqpPdftClientesContactosVORowImpl.getDireccion()))
                      ||(null==xxqpPdftClientesContactosVORowImpl.getTelefono()||"".equals(xxqpPdftClientesContactosVORowImpl.getTelefono()))
                      ||(null==xxqpPdftClientesContactosVORowImpl.getCorreoElectronico()||"".equals(xxqpPdftClientesContactosVORowImpl.getCorreoElectronico()))
                      ||(null==xxqpPdftClientesContactosVORowImpl.getPuesto()||"".equals(xxqpPdftClientesContactosVORowImpl.getPuesto()))
                      ||(null==xxqpPdftClientesContactosVORowImpl.getNumeroCelular()||"".equals(xxqpPdftClientesContactosVORowImpl.getNumeroCelular()))
                      ){
                          retval.add(new OAException("Tipo de Contacto Cierre y Seguimiento es requerido.",OAException.ERROR));
                      }
                 }else if("Cobranza".equals(strTipoDeContacto)){
                     if((null==xxqpPdftClientesContactosVORowImpl.getNombre()||"".equals(xxqpPdftClientesContactosVORowImpl.getNombre()))
                        ||(null==xxqpPdftClientesContactosVORowImpl.getDireccion()||"".equals(xxqpPdftClientesContactosVORowImpl.getDireccion()))
                        ||(null==xxqpPdftClientesContactosVORowImpl.getTelefono()||"".equals(xxqpPdftClientesContactosVORowImpl.getTelefono()))
                        ||(null==xxqpPdftClientesContactosVORowImpl.getCorreoElectronico()||"".equals(xxqpPdftClientesContactosVORowImpl.getCorreoElectronico()))
                        ||(null==xxqpPdftClientesContactosVORowImpl.getPuesto()||"".equals(xxqpPdftClientesContactosVORowImpl.getPuesto()))
                        ||(null==xxqpPdftClientesContactosVORowImpl.getNumeroCelular()||"".equals(xxqpPdftClientesContactosVORowImpl.getNumeroCelular()))
                        ){
                            retval.add(new OAException("Tipo de Contacto Cobranza es requerido.",OAException.ERROR));
                        }
                 }else if("Gerencial".equals(strTipoDeContacto)){
                     if((null==xxqpPdftClientesContactosVORowImpl.getNombre()||"".equals(xxqpPdftClientesContactosVORowImpl.getNombre()))
                        ||(null==xxqpPdftClientesContactosVORowImpl.getDireccion()||"".equals(xxqpPdftClientesContactosVORowImpl.getDireccion()))
                        ||(null==xxqpPdftClientesContactosVORowImpl.getTelefono()||"".equals(xxqpPdftClientesContactosVORowImpl.getTelefono()))
                        ||(null==xxqpPdftClientesContactosVORowImpl.getCorreoElectronico()||"".equals(xxqpPdftClientesContactosVORowImpl.getCorreoElectronico()))
                        ||(null==xxqpPdftClientesContactosVORowImpl.getPuesto()||"".equals(xxqpPdftClientesContactosVORowImpl.getPuesto()))
                         ||(null==xxqpPdftClientesContactosVORowImpl.getNumeroCelular()||"".equals(xxqpPdftClientesContactosVORowImpl.getNumeroCelular()))
                        ){
                            retval.add(new OAException("Tipo de Contacto Gerencial es requerido.",OAException.ERROR));
                        }
                 }
                  /**xxqpPdftClientesContactosVORowImpl.setIsRequired("yes"); **/
        
              } /** END  while(iterator.hasNext()){ **/
               iterator.closeRowSetIterator();
           } /** END if(null!=xxqpPdftClientesContactosVOImpl){ **/
        
        return retval; 
    }

    /**Container's getter for OperatingUnitVO1
     */
    public OperatingUnitVOImpl getOperatingUnitVO1() {
        return (OperatingUnitVOImpl)findViewObject("OperatingUnitVO1");
    }
    
    /**
     * 
     * @param pStrEmpresaQueFacturaValue
     */
    public void initLegalEntityVO(String pStrEmpresaQueFacturaValue) {
        OperatingUnitVOImpl operatingUnitVOImpl = getOperatingUnitVO1();
        oracle.jbo.domain.Number numLegalEntity=null;
        try {
            numLegalEntity = new oracle.jbo.domain.Number(pStrEmpresaQueFacturaValue);
            operatingUnitVOImpl.initByLegalEntityID(numLegalEntity);
        } catch (SQLException e) {
            throw new OAException("Excepcion al covertir a numerico:"+pStrEmpresaQueFacturaValue);
        }
    }

    /**Container's getter for DiasDeSemanaVO1
     */
    public DiasDeSemanaVOImpl getDiasDeSemanaVO1() {
        return (DiasDeSemanaVOImpl)findViewObject("DiasDeSemanaVO1");
    }

    public String getXxPdftCustomerInfo(String pOperacion) {
        String retval = null; 
        String strCallableStmt = " BEGIN \n" + 
                                 "  APPS.XXQP_PDFT_CUSTOMER_PKG.GET_INFO ( PSO_ERRMSG          => :1\n" + 
                                 "                                       , PSO_ERRCOD          => :2\n" + 
                                 "                                       , PCO_INFO            => :3\n" + 
                                 "                                       , PNI_CUSTOMER_ID     => :4\n"+
                                 "                                       , PSI_OPERATING_UNIT  => :5\n"+
                                 "                                       , PSI_MOVIMIENTO      => :6\n"+
                                 "                                        );\n" + 
                                 " END; \n";
        OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
        OracleCallableStatement oraclecallablestatement =  (OracleCallableStatement)oadbtransaction.createCallableStatement(strCallableStmt, 1);
        oracle.jbo.domain.Number numHeaderId = (oracle.jbo.domain.Number)this.getXxqpPdftClientesHeaderVO1().getCurrentRow().getAttribute("Id");
        String strOperatingUnit = (String)this.getXxqpPdftClientesDirFiscalVO1().getCurrentRow().getAttribute("PrimOperatingUnit");
        System.out.println("numHeaderId:"+numHeaderId);
        try {
            oraclecallablestatement.registerOutParameter(1,Types.VARCHAR);
            oraclecallablestatement.registerOutParameter(2,Types.VARCHAR);
            oraclecallablestatement.registerOutParameter(3,Types.CLOB);
            oraclecallablestatement.setDouble(4,numHeaderId.doubleValue());
            oraclecallablestatement.setString(5,strOperatingUnit);
            if("CREATE".equals(pOperacion)){
                oraclecallablestatement.setString(6,"ALTA");
            }else if("UPDATE".equals(pOperacion)){
                oraclecallablestatement.setString(6,"MODIFICACION");
            }else{
                oraclecallablestatement.setString(6,null);
            }
            oraclecallablestatement.execute();
            java.sql.Clob retvalClob = oraclecallablestatement.getClob(3);
            java.io.Reader reader =retvalClob.getCharacterStream();
            java.io.BufferedReader bufferReader = new java.io.BufferedReader(reader);
            String retvalxml = "";
            String line = null; 
            while((line = bufferReader.readLine())!=null){
                retvalxml = retvalxml+line;
            }
            System.out.println("retvalxml:"+retvalxml);
            retval = retvalxml;
            bufferReader.close();
            reader.close();
                        
        } catch (SQLException e) {
            System.out.println("SQLException en el metodo getXxPdftCustomerInfo:"+e.getErrorCode());
            throw new OAException("SQLException en el metodo getXxPdftCustomerInfo:"+e.getErrorCode(),OAException.ERROR); 
        }catch (IOException ioe) {
            System.out.println("IOException en el metodo getXxPdftCustomerInfo"+ioe.getMessage());
            throw new OAException("IOException en el metodo getXxPdftCustomerInfo:"+ioe.getMessage(),OAException.ERROR);
        }
        
        return retval;
        
    }

    public void enviaCorreos(InputStream pInputStream
                            ,String pNombreCliente
                            ,String pRFC
                            ,String pNombrePdf
                            ,InputStream pIsPrimCedulaFile
                            ,String pPrimCedulaFileName
                            ,String pPrimCedulaContentType
                            ,String pOperacion
                            ) {
        System.out.println("Entra AltaDeClienteAMImpl.enviaCorreos");
        OADBTransaction  oADBTransaction = this.getOADBTransaction();
        Connection connection =   oADBTransaction.getJdbcConnection();
        String strPrepStmt = "select meaning correos\n" + 
        " from fnd_lookup_values \n" + 
        " where lookup_type = 'XXQP_PDFT_CUST_DELIV'\n" + 
        "   and language='ESA'\n" + 
        "   and enabled_flag = 'Y'\n" + 
        "   and trunc(sysdate) between nvl(start_date_active,to_date ('01/01/0001','DD/MM/YYYY')) and nvl(end_date_active,to_date ('31/12/4712','DD/MM/YYYY'))";
           
              int count = 0; 
              String strCorreos = null; 
              PreparedStatement prepStmt = null;
              ResultSet resultSet = null;
              try
              {
                prepStmt = connection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
                resultSet = prepStmt.executeQuery();
              
                while(resultSet.next()){
                    if(null==strCorreos){
                        strCorreos = resultSet.getString("correos");
                    }else{
                        strCorreos = strCorreos+","+resultSet.getString("correos");
                    }
                   count = count +1; 
               }
                
             } catch (SQLException sqle)
             {
              throw new OAException("EXCEPTION metodo enviaCorreos clase AltaDeClientesAMIlm:"+sqle.getErrorCode()+" , "+sqle.getMessage(),OAException.ERROR);
             }
             
            closeResultSet(resultSet);
            closePreparedStatement(prepStmt);
        
        java.util.Map<String,String> map = new java.util.HashMap<String,String>();
        map.put("Correos",strCorreos);
        if("CREATE".equals(pOperacion)){
            map.put("Subject","Alta de cliente");
        }else if("UPDATE".equals(pOperacion)){
            map.put("Subject","Modificacion de cliente");
        }
        
        map.put("Body","Nombre del cliente:"+pNombreCliente+"\nRFC:"+pRFC);
        map.put("NombrePDF",pNombrePdf);
        map.put("PrimCedulaFileName",pPrimCedulaFileName);
        map.put("PrimCedulaContentType",pPrimCedulaContentType);
        if(count>0){
        testDeliveryManager(pInputStream,pIsPrimCedulaFile,map);
        }
        System.out.println("Sale AltaDeClienteAMImpl.enviaCorreos");
    }

    private void testDeliveryManager(InputStream pInputStream
                                    ,InputStream pIsPrimCedulaFile
                                    ,Map<String,String> map) {
     System.out.println("Entra testDeliveryManager");
        
        String strCorreos = map.get("Correos");
        String strSubject = map.get("Subject"); 
        String strBody = map.get("Body"); 
        String strNombrePDF = map.get("NombrePDF");
        String strPrimCedulaFileName = map.get("PrimCedulaFileName");
        String strPrimCedulaContentType = map.get("PrimCedulaContentType");
        
        Properties properties =System.getProperties();
        properties.put("mail.smtp.auth","true");
        properties.put("mail.smtp.starttls.enable","true");
        properties.put("mail.smtp.host","mail.qualitypost.com.mx");
        properties.put("mail.smtp.port","465");
        properties.put("mail.smtp.socketFactory.port", "465"); /*SSL Port*/
        properties.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory"); /*SSL Factory Class*/
        
        strXxqpPdftEmail = this.getOADBTransaction().getProfile("XXQP_PDFT_EMAIL"); 
        strXxqpPdftEmailPwd = this.getOADBTransaction().getProfile("XXQP_PDFT_EMAIL_PWD");
        
        Session session = Session.getInstance(properties,new javax.mail.Authenticator(){
                                                        protected javax.mail.PasswordAuthentication getPasswordAuthentication(){
                                                         return new javax.mail.PasswordAuthentication (AltaDeClienteAMImpl.strXxqpPdftEmail,AltaDeClienteAMImpl.strXxqpPdftEmailPwd);
                                                        }
                                                        }
                                               );
        session.setDebug(true);
        Message message = new MimeMessage(session);
        try {
          message.setFrom( new InternetAddress(AltaDeClienteAMImpl.strXxqpPdftEmail));
          message.setRecipients(Message.RecipientType.TO,InternetAddress.parse(strCorreos));
          message.setSubject(strSubject);
          /* Create the message part */
          BodyPart messageBodyPart = new MimeBodyPart();
          /* Now set the actual message */
          messageBodyPart.setText(strBody);
          /* Create a multipar message */
          Multipart multipart = new MimeMultipart();
          /* Set text message part */
          multipart.addBodyPart(messageBodyPart);
          addAttachment(multipart
                       ,pInputStream
                       ,strNombrePDF+".pdf"
                       ,"application/pdf"
                       );
          addAttachment(multipart
                       ,pIsPrimCedulaFile
                       ,strPrimCedulaFileName
                       ,strPrimCedulaContentType
                       );            
          /**
          // Part two is attachment
           messageBodyPart = new MimeBodyPart();
           DataSource source = null; **new FileDataSource(filename); **
           try {
            source = new ByteArrayDataSource(pInputStream,"application/pdf");
           } catch (IOException e) {
            System.out.println("testDeliveryManager new ByteArrayDataSource:"+e.getMessage());
           }
           messageBodyPart.setDataHandler(new DataHandler(source));
           messageBodyPart.setFileName(strNombreCliente+".pdf");
           multipart.addBodyPart(messageBodyPart);
           **/
           // Send the complete message parts
           message.setContent(multipart);
           Transport.send(message);
        } catch (MessagingException me) {
          System.out.println("MessagingException:"+me.getMessage());
        } catch (IOException e) {
            System.out.println("IOException:"+e.getMessage());
        }
        System.out.println("Sale testDeliveryManager");   
    }
    
    private static void addAttachment(Multipart pMultipart
                                     ,InputStream pInputStream
                                     ,String pFilename
                                     ,String pContentType) throws IOException, 
                                                              MessagingException {
        
        DataSource source = new ByteArrayDataSource(pInputStream,pContentType);
        BodyPart messageBodyPart = new MimeBodyPart();        
        messageBodyPart.setDataHandler(new DataHandler(source));
        messageBodyPart.setFileName(pFilename);
        pMultipart.addBodyPart(messageBodyPart);
    }

    public void rollbackTrx(Number pHeaderId) {
        String strCallableStmt = " BEGIN \n" + 
                                 "  APPS.XXQP_PDFT_CLIENTES_FOTP_PKG.rollback_trx ( pni_header_id          => :1\n" + 
                                 "                                                 );\n" + 
                                 " END; \n";
        OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
        OracleCallableStatement oraclecallablestatement =  (OracleCallableStatement)oadbtransaction.createCallableStatement(strCallableStmt, 1);
        try {
            oraclecallablestatement.setDouble(1,pHeaderId.doubleValue());
            oraclecallablestatement.execute();
      } catch (SQLException e) {
            System.out.println("SQLException en el metodo rollbackTrx:"+e.getErrorCode());
            throw new OAException("SQLException en el metodo rollbackTrx:"+e.getErrorCode(),OAException.ERROR); 
        }
        
    }
}
